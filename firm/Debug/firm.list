
firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002f9c  08002f9c  00003f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003030  08003030  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003030  08003030  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00004030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003038  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003044  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003044  0000516c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095ca  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018df  00000000  00000000  0000e5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0000fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fa  00000000  00000000  00010928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d7f  00000000  00000000  00011122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0c6  00000000  00000000  00024ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807b3  00000000  00000000  0002ff67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b071a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  000b0760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b2c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002f84 	.word	0x08002f84

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002f84 	.word	0x08002f84

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fcd2 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f880 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa90 	bl	8000748 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f97c 	bl	8000524 <MX_TIM3_Init>
  MX_TIM16_Init();
 800022c:	f000 fa04 	bl	8000638 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000230:	f000 f8cc 	bl	80003cc <MX_TIM1_Init>
  MX_TIM14_Init();
 8000234:	f000 f9da 	bl	80005ec <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000238:	4b30      	ldr	r3, [pc, #192]	@ (80002fc <main+0xe4>)
 800023a:	213c      	movs	r1, #60	@ 0x3c
 800023c:	0018      	movs	r0, r3
 800023e:	f001 ff59 	bl	80020f4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim14);
 8000242:	4b2f      	ldr	r3, [pc, #188]	@ (8000300 <main+0xe8>)
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fd2f 	bl	8001ca8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800024a:	4b2e      	ldr	r3, [pc, #184]	@ (8000304 <main+0xec>)
 800024c:	2100      	movs	r1, #0
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fdd0 	bl	8001df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000254:	4b2c      	ldr	r3, [pc, #176]	@ (8000308 <main+0xf0>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f001 fdcb 	bl	8001df4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800025e:	23a0      	movs	r3, #160	@ 0xa0
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2101      	movs	r1, #1
 8000264:	0018      	movs	r0, r3
 8000266:	f000 ff99 	bl	800119c <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	001a      	movs	r2, r3
 800026e:	4b27      	ldr	r3, [pc, #156]	@ (800030c <main+0xf4>)
 8000270:	601a      	str	r2, [r3, #0]
	  if(read==0 && (cnt>50 && 32000>cnt)){ //down
 8000272:	4b26      	ldr	r3, [pc, #152]	@ (800030c <main+0xf4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d10e      	bne.n	8000298 <main+0x80>
 800027a:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <main+0xf8>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	2b32      	cmp	r3, #50	@ 0x32
 8000280:	d90a      	bls.n	8000298 <main+0x80>
 8000282:	4b23      	ldr	r3, [pc, #140]	@ (8000310 <main+0xf8>)
 8000284:	881a      	ldrh	r2, [r3, #0]
 8000286:	23fa      	movs	r3, #250	@ 0xfa
 8000288:	01db      	lsls	r3, r3, #7
 800028a:	429a      	cmp	r2, r3
 800028c:	d204      	bcs.n	8000298 <main+0x80>
		  duty= 600;
 800028e:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <main+0xfc>)
 8000290:	2296      	movs	r2, #150	@ 0x96
 8000292:	0092      	lsls	r2, r2, #2
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e014      	b.n	80002c2 <main+0xaa>
	  }else if(read==1 && (cnt<10000 || 30000<cnt)){ //up
 8000298:	4b1c      	ldr	r3, [pc, #112]	@ (800030c <main+0xf4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d10d      	bne.n	80002bc <main+0xa4>
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <main+0xf8>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000318 <main+0x100>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d904      	bls.n	80002b4 <main+0x9c>
 80002aa:	4b19      	ldr	r3, [pc, #100]	@ (8000310 <main+0xf8>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	4a1b      	ldr	r2, [pc, #108]	@ (800031c <main+0x104>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d903      	bls.n	80002bc <main+0xa4>
		  duty= -600;
 80002b4:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <main+0xfc>)
 80002b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000320 <main+0x108>)
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e002      	b.n	80002c2 <main+0xaa>
	  }else{
		  duty = 0;
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <main+0xfc>)
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
	  }



	  if(duty>0){ //dutyMax 800
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <main+0xfc>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	dd09      	ble.n	80002de <main+0xc6>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 80002ca:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <main+0xfc>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <main+0xf0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <main+0xec>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2200      	movs	r2, #0
 80002da:	635a      	str	r2, [r3, #52]	@ 0x34
 80002dc:	e009      	b.n	80002f2 <main+0xda>
	  }else{
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <main+0xf0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, -1 * duty);
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <main+0xfc>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	425a      	negs	r2, r3
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <main+0xec>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  HAL_Delay(100);
 80002f2:	2064      	movs	r0, #100	@ 0x64
 80002f4:	f000 fcec 	bl	8000cd0 <HAL_Delay>
	  read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80002f8:	e7b1      	b.n	800025e <main+0x46>
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	20000074 	.word	0x20000074
 8000300:	200000c0 	.word	0x200000c0
 8000304:	2000010c 	.word	0x2000010c
 8000308:	20000028 	.word	0x20000028
 800030c:	20000164 	.word	0x20000164
 8000310:	20000158 	.word	0x20000158
 8000314:	20000160 	.word	0x20000160
 8000318:	0000270f 	.word	0x0000270f
 800031c:	00007530 	.word	0x00007530
 8000320:	fffffda8 	.word	0xfffffda8

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b093      	sub	sp, #76	@ 0x4c
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	2414      	movs	r4, #20
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2334      	movs	r3, #52	@ 0x34
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fdf9 	bl	8002f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	2310      	movs	r3, #16
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fdf2 	bl	8002f2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000348:	2380      	movs	r3, #128	@ 0x80
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	0018      	movs	r0, r3
 800034e:	f000 ff7b 	bl	8001248 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000358:	193b      	adds	r3, r7, r4
 800035a:	22a0      	movs	r2, #160	@ 0xa0
 800035c:	02d2      	lsls	r2, r2, #11
 800035e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	0021      	movs	r1, r4
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2202      	movs	r2, #2
 8000366:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2203      	movs	r2, #3
 800036c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2208      	movs	r2, #8
 8000378:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2280      	movs	r2, #128	@ 0x80
 800037e:	0292      	lsls	r2, r2, #10
 8000380:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	0592      	lsls	r2, r2, #22
 8000388:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	187b      	adds	r3, r7, r1
 800038c:	0018      	movs	r0, r3
 800038e:	f000 ff9b 	bl	80012c8 <HAL_RCC_OscConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000396:	f000 fa63 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2207      	movs	r2, #7
 800039e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2202      	movs	r2, #2
 80003a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2102      	movs	r1, #2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fa96 	bl	80018e8 <HAL_RCC_ClockConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003c0:	f000 fa4e 	bl	8000860 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b013      	add	sp, #76	@ 0x4c
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b098      	sub	sp, #96	@ 0x60
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	2354      	movs	r3, #84	@ 0x54
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	230c      	movs	r3, #12
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fda5 	bl	8002f2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	2338      	movs	r3, #56	@ 0x38
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	231c      	movs	r3, #28
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 fd9d 	bl	8002f2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	2334      	movs	r3, #52	@ 0x34
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f002 fd96 	bl	8002f2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000400:	4b45      	ldr	r3, [pc, #276]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000402:	4a46      	ldr	r2, [pc, #280]	@ (800051c <MX_TIM1_Init+0x150>)
 8000404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000406:	4b44      	ldr	r3, [pc, #272]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000408:	2203      	movs	r2, #3
 800040a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <MX_TIM1_Init+0x14c>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800-1;
 8000412:	4b41      	ldr	r3, [pc, #260]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000414:	4a42      	ldr	r2, [pc, #264]	@ (8000520 <MX_TIM1_Init+0x154>)
 8000416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b3f      	ldr	r3, [pc, #252]	@ (8000518 <MX_TIM1_Init+0x14c>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041e:	4b3e      	ldr	r3, [pc, #248]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000424:	4b3c      	ldr	r3, [pc, #240]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800042a:	4b3b      	ldr	r3, [pc, #236]	@ (8000518 <MX_TIM1_Init+0x14c>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fc89 	bl	8001d44 <HAL_TIM_PWM_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 fa13 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	2154      	movs	r1, #84	@ 0x54
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044e:	187a      	adds	r2, r7, r1
 8000450:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fc53 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800045e:	f000 f9ff 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2138      	movs	r1, #56	@ 0x38
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2260      	movs	r2, #96	@ 0x60
 8000468:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800048e:	1879      	adds	r1, r7, r1
 8000490:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <MX_TIM1_Init+0x14c>)
 8000492:	2208      	movs	r2, #8
 8000494:	0018      	movs	r0, r3
 8000496:	f001 ffd9 	bl	800244c <HAL_TIM_PWM_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800049e:	f000 f9df 	bl	8000860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2280      	movs	r2, #128	@ 0x80
 80004c4:	0192      	lsls	r2, r2, #6
 80004c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2280      	movs	r2, #128	@ 0x80
 80004de:	0492      	lsls	r2, r2, #18
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_TIM1_Init+0x14c>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fc62 	bl	8002dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000504:	f000 f9ac 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000508:	4b03      	ldr	r3, [pc, #12]	@ (8000518 <MX_TIM1_Init+0x14c>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fa9c 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b018      	add	sp, #96	@ 0x60
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028
 800051c:	40012c00 	.word	0x40012c00
 8000520:	0000031f 	.word	0x0000031f

08000524 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b08d      	sub	sp, #52	@ 0x34
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800052a:	240c      	movs	r4, #12
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2324      	movs	r3, #36	@ 0x24
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fcf9 	bl	8002f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	230c      	movs	r3, #12
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fcf2 	bl	8002f2c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000548:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 800054a:	4a26      	ldr	r2, [pc, #152]	@ (80005e4 <MX_TIM3_Init+0xc0>)
 800054c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800055a:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 800055c:	4a22      	ldr	r2, [pc, #136]	@ (80005e8 <MX_TIM3_Init+0xc4>)
 800055e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fcfa 	bl	8001fa4 <HAL_TIM_Encoder_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80005b4:	f000 f954 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005c4:	003a      	movs	r2, r7
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <MX_TIM3_Init+0xbc>)
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 fb98 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005d4:	f000 f944 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b00d      	add	sp, #52	@ 0x34
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	20000074 	.word	0x20000074
 80005e4:	40000400 	.word	0x40000400
 80005e8:	0000ffff 	.word	0x0000ffff

080005ec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_TIM14_Init+0x40>)
 80005f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <MX_TIM14_Init+0x44>)
 80005f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400-1;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_TIM14_Init+0x40>)
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <MX_TIM14_Init+0x48>)
 80005fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MX_TIM14_Init+0x40>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_TIM14_Init+0x40>)
 8000604:	2263      	movs	r2, #99	@ 0x63
 8000606:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <MX_TIM14_Init+0x40>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_TIM14_Init+0x40>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <MX_TIM14_Init+0x40>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 faee 	bl	8001bf8 <HAL_TIM_Base_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000620:	f000 f91e 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	200000c0 	.word	0x200000c0
 8000630:	40002000 	.word	0x40002000
 8000634:	000018ff 	.word	0x000018ff

08000638 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800063e:	2334      	movs	r3, #52	@ 0x34
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	0018      	movs	r0, r3
 8000644:	231c      	movs	r3, #28
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f002 fc6f 	bl	8002f2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800064e:	003b      	movs	r3, r7
 8000650:	0018      	movs	r0, r3
 8000652:	2334      	movs	r3, #52	@ 0x34
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f002 fc68 	bl	8002f2c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800065c:	4b37      	ldr	r3, [pc, #220]	@ (800073c <MX_TIM16_Init+0x104>)
 800065e:	4a38      	ldr	r2, [pc, #224]	@ (8000740 <MX_TIM16_Init+0x108>)
 8000660:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8000662:	4b36      	ldr	r3, [pc, #216]	@ (800073c <MX_TIM16_Init+0x104>)
 8000664:	2203      	movs	r2, #3
 8000666:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b34      	ldr	r3, [pc, #208]	@ (800073c <MX_TIM16_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 800-1;
 800066e:	4b33      	ldr	r3, [pc, #204]	@ (800073c <MX_TIM16_Init+0x104>)
 8000670:	4a34      	ldr	r2, [pc, #208]	@ (8000744 <MX_TIM16_Init+0x10c>)
 8000672:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b31      	ldr	r3, [pc, #196]	@ (800073c <MX_TIM16_Init+0x104>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800067a:	4b30      	ldr	r3, [pc, #192]	@ (800073c <MX_TIM16_Init+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <MX_TIM16_Init+0x104>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000686:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_TIM16_Init+0x104>)
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fab5 	bl	8001bf8 <HAL_TIM_Base_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000692:	f000 f8e5 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_TIM16_Init+0x104>)
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fb53 	bl	8001d44 <HAL_TIM_PWM_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f8dd 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	2134      	movs	r1, #52	@ 0x34
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2260      	movs	r2, #96	@ 0x60
 80006ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d2:	1879      	adds	r1, r7, r1
 80006d4:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_TIM16_Init+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 feb7 	bl	800244c <HAL_TIM_PWM_ConfigChannel>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80006e2:	f000 f8bd 	bl	8000860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000704:	003b      	movs	r3, r7
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	0192      	lsls	r2, r2, #6
 800070a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800070c:	003b      	movs	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000712:	003b      	movs	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000718:	003a      	movs	r2, r7
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_TIM16_Init+0x104>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fb50 	bl	8002dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000728:	f000 f89a 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800072c:	4b03      	ldr	r3, [pc, #12]	@ (800073c <MX_TIM16_Init+0x104>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f98a 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b014      	add	sp, #80	@ 0x50
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000010c 	.word	0x2000010c
 8000740:	40014400 	.word	0x40014400
 8000744:	0000031f 	.word	0x0000031f

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	@ 0x24
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	240c      	movs	r4, #12
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f002 fbe7 	bl	8002f2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	@ 0x34
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_GPIO_Init+0xbc>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077a:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_GPIO_Init+0xbc>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xbc>)
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_GPIO_Init+0xbc>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	2202      	movs	r2, #2
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a6:	23a0      	movs	r3, #160	@ 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2200      	movs	r2, #0
 80007ac:	2110      	movs	r1, #16
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fd11 	bl	80011d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	193a      	adds	r2, r7, r4
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fb80 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2210      	movs	r2, #16
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	23a0      	movs	r3, #160	@ 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb6c 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b009      	add	sp, #36	@ 0x24
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    if (htim == &htim14){ //10msec timer
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000814:	429a      	cmp	r2, r3
 8000816:	d117      	bne.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x40>
  	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000818:	23a0      	movs	r3, #160	@ 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2110      	movs	r1, #16
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fcf6 	bl	8001210 <HAL_GPIO_TogglePin>
  	  uint16_t raw_cnt = TIM3->CNT;
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000828:	210e      	movs	r1, #14
 800082a:	187b      	adds	r3, r7, r1
 800082c:	801a      	strh	r2, [r3, #0]
  	  int32_t raw_diff = raw_cnt - cnt;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000834:	8812      	ldrh	r2, [r2, #0]
 8000836:	1a9b      	subs	r3, r3, r2
 8000838:	60bb      	str	r3, [r7, #8]
  	  cnt = raw_cnt;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800083c:	187a      	adds	r2, r7, r1
 800083e:	8812      	ldrh	r2, [r2, #0]
 8000840:	801a      	strh	r2, [r3, #0]

//  	  if(raw_diff<0){
//  		  raw_diff += 65536;
//  	  }
  	  diff_cnt = raw_diff;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	601a      	str	r2, [r3, #0]
    }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b004      	add	sp, #16
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000c0 	.word	0x200000c0
 8000854:	40000400 	.word	0x40000400
 8000858:	20000158 	.word	0x20000158
 800085c:	2000015c 	.word	0x2000015c

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_MspInit+0x44>)
 8000874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x44>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <HAL_MspInit+0x44>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x44>)
 800088c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x44>)
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	0549      	lsls	r1, r1, #21
 8000894:	430a      	orrs	r2, r1
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_MspInit+0x44>)
 800089a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	055b      	lsls	r3, r3, #21
 80008a0:	4013      	ands	r3, r2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_TIM_PWM_MspInit+0x38>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10d      	bne.n	80008e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	0109      	lsls	r1, r1, #4
 80008d0:	430a      	orrs	r2, r1
 80008d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80008d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2414      	movs	r4, #20
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f002 fb10 	bl	8002f2c <memset>
  if(htim_encoder->Instance==TIM3)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a2b      	ldr	r2, [pc, #172]	@ (80009c0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d14f      	bne.n	80009b6 <HAL_TIM_Encoder_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091a:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000922:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000932:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094a:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800094c:	2104      	movs	r1, #4
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2202      	movs	r2, #2
 8000968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2201      	movs	r2, #1
 800097a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	193a      	adds	r2, r7, r4
 800097e:	23a0      	movs	r3, #160	@ 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 faa5 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2240      	movs	r2, #64	@ 0x40
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_TIM_Encoder_MspInit+0xd4>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fa8f 	bl	8000ed4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b00b      	add	sp, #44	@ 0x2c
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	40000400 	.word	0x40000400
 80009c4:	40021000 	.word	0x40021000
 80009c8:	50000800 	.word	0x50000800

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <HAL_TIM_Base_MspInit+0x70>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d116      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 80009e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0209      	lsls	r1, r1, #8
 80009e8:	430a      	orrs	r2, r1
 80009ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 80009ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2013      	movs	r0, #19
 8000a00:	f000 fa36 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a04:	2013      	movs	r0, #19
 8000a06:	f000 fa48 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a0a:	e012      	b.n	8000a32 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <HAL_TIM_Base_MspInit+0x78>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10d      	bne.n	8000a32 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 8000a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_TIM_Base_MspInit+0x74>)
 8000a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	40002000 	.word	0x40002000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40014400 	.word	0x40014400

08000a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2414      	movs	r4, #20
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fa66 	bl	8002f2c <memset>
  if(htim->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <HAL_TIM_MspPostInit+0xc0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d122      	bne.n	8000ab0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2240      	movs	r2, #64	@ 0x40
 8000a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b10 <HAL_TIM_MspPostInit+0xc8>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 fa13 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000aae:	e027      	b.n	8000b00 <HAL_TIM_MspPostInit+0xb8>
  else if(htim->Instance==TIM16)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	@ (8000b14 <HAL_TIM_MspPostInit+0xcc>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d122      	bne.n	8000b00 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_TIM_MspPostInit+0xc4>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad2:	2114      	movs	r1, #20
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2240      	movs	r2, #64	@ 0x40
 8000ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2205      	movs	r2, #5
 8000af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	23a0      	movs	r3, #160	@ 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f9ea 	bl	8000ed4 <HAL_GPIO_Init>
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b00b      	add	sp, #44	@ 0x2c
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	50000400 	.word	0x50000400
 8000b14:	40014400 	.word	0x40014400

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8aa 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <TIM14_IRQHandler+0x14>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fb72 	bl	800223c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	200000c0 	.word	0x200000c0

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f7ff fff6 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b9e:	f002 f9cd 	bl	8002f3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ba2:	f7ff fb39 	bl	8000218 <main>

08000ba6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb4:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bbc:	2000016c 	.word	0x2000016c

08000bc0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_Init+0x3c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_Init+0x3c>)
 8000bd6:	2180      	movs	r1, #128	@ 0x80
 8000bd8:	0049      	lsls	r1, r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f810 	bl	8000c04 <HAL_InitTick>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe3c 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <HAL_InitTick+0x88>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d02b      	beq.n	8000c74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_InitTick+0x8c>)
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_InitTick+0x88>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	0019      	movs	r1, r3
 8000c26:	23fa      	movs	r3, #250	@ 0xfa
 8000c28:	0098      	lsls	r0, r3, #2
 8000c2a:	f7ff fa69 	bl	8000100 <__udivsi3>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	0019      	movs	r1, r3
 8000c32:	0020      	movs	r0, r4
 8000c34:	f7ff fa64 	bl	8000100 <__udivsi3>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 f93d 	bl	8000eba <HAL_SYSTICK_Config>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d112      	bne.n	8000c6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d80a      	bhi.n	8000c60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f90c 	bl	8000e70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_InitTick+0x90>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e008      	b.n	8000c7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e003      	b.n	8000c7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b005      	add	sp, #20
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	18d2      	adds	r2, r2, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000168 	.word	0x20000168

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	@ (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000168 	.word	0x20000168

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff fff0 	bl	8000cbc <HAL_GetTick>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	001a      	movs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	189b      	adds	r3, r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	f7ff ffe0 	bl	8000cbc <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d2a:	d809      	bhi.n	8000d40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	231f      	movs	r3, #31
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_EnableIRQ+0x30>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	@ 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	@ 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	@ 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	045b      	lsls	r3, r3, #17
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d301      	bcc.n	8000e40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e010      	b.n	8000e62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <SysTick_Config+0x44>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	3a01      	subs	r2, #1
 8000e46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ff7c 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x44>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x44>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	1c02      	adds	r2, r0, #0
 8000e80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff33 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffaf 	bl	8000e28 <SysTick_Config>
 8000eca:	0003      	movs	r3, r0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e147      	b.n	8001174 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e138      	b.n	800116e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	@ 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e092      	b.n	800116e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001048:	4a50      	ldr	r2, [pc, #320]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1ca>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	@ (8001190 <HAL_GPIO_Init+0x2bc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1c6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a44      	ldr	r2, [pc, #272]	@ (8001194 <HAL_GPIO_Init+0x2c0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1c2>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a43      	ldr	r2, [pc, #268]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1be>
 800108e:	2303      	movs	r3, #3
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001092:	2305      	movs	r3, #5
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2103      	movs	r1, #3
 80010a4:	400a      	ands	r2, r1
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010b0:	4936      	ldr	r1, [pc, #216]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3318      	adds	r3, #24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010be:	4b33      	ldr	r3, [pc, #204]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010e8:	4b28      	ldr	r3, [pc, #160]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	4013      	ands	r3, r2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 8001114:	2384      	movs	r3, #132	@ 0x84
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4914      	ldr	r1, [pc, #80]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 800113a:	2284      	movs	r2, #132	@ 0x84
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001140:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 8001142:	2380      	movs	r3, #128	@ 0x80
 8001144:	58d3      	ldr	r3, [r2, r3]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001166:	4909      	ldr	r1, [pc, #36]	@ (800118c <HAL_GPIO_Init+0x2b8>)
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	40da      	lsrs	r2, r3
 800117c:	1e13      	subs	r3, r2, #0
 800117e:	d000      	beq.n	8001182 <HAL_GPIO_Init+0x2ae>
 8001180:	e6b0      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b006      	add	sp, #24
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021800 	.word	0x40021800
 8001190:	50000400 	.word	0x50000400
 8001194:	50000800 	.word	0x50000800
 8001198:	50000c00 	.word	0x50000c00

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	000a      	movs	r2, r1
 80011a6:	1cbb      	adds	r3, r7, #2
 80011a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	1cba      	adds	r2, r7, #2
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	4013      	ands	r3, r2
 80011b4:	d004      	beq.n	80011c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011b6:	230f      	movs	r3, #15
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e003      	b.n	80011c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011c8:	230f      	movs	r3, #15
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	781b      	ldrb	r3, [r3, #0]
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	0008      	movs	r0, r1
 80011e0:	0011      	movs	r1, r2
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	1c02      	adds	r2, r0, #0
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	1c7b      	adds	r3, r7, #1
 80011ea:	1c0a      	adds	r2, r1, #0
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ee:	1c7b      	adds	r3, r7, #1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	1cbb      	adds	r3, r7, #2
 80011f8:	881a      	ldrh	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	000a      	movs	r2, r1
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001224:	1cbb      	adds	r3, r7, #2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	1cb9      	adds	r1, r7, #2
 8001234:	8809      	ldrh	r1, [r1, #0]
 8001236:	400b      	ands	r3, r1
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001256:	4013      	ands	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	429a      	cmp	r2, r3
 800126a:	d11f      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	0013      	movs	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	189b      	adds	r3, r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4912      	ldr	r1, [pc, #72]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800127a:	0018      	movs	r0, r3
 800127c:	f7fe ff40 	bl	8000100 <__udivsi3>
 8001280:	0003      	movs	r3, r0
 8001282:	3301      	adds	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001286:	e008      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3b01      	subs	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e001      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e009      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	401a      	ands	r2, r3
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d0ed      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	40007000 	.word	0x40007000
 80012bc:	fffff9ff 	.word	0xfffff9ff
 80012c0:	20000000 	.word	0x20000000
 80012c4:	000f4240 	.word	0x000f4240

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2f3      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x1e>
 80012e4:	e07c      	b.n	80013e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	4bc3      	ldr	r3, [pc, #780]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2238      	movs	r2, #56	@ 0x38
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	4bc0      	ldr	r3, [pc, #768]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x3e>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d002      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4bb9      	ldr	r3, [pc, #740]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	4013      	ands	r3, r2
 8001316:	d062      	beq.n	80013de <HAL_RCC_OscConfig+0x116>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d15e      	bne.n	80013de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e2ce      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	429a      	cmp	r2, r3
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x78>
 8001330:	4bb0      	ldr	r3, [pc, #704]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4baf      	ldr	r3, [pc, #700]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e020      	b.n	8001382 <HAL_RCC_OscConfig+0xba>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	23a0      	movs	r3, #160	@ 0xa0
 8001346:	02db      	lsls	r3, r3, #11
 8001348:	429a      	cmp	r2, r3
 800134a:	d10e      	bne.n	800136a <HAL_RCC_OscConfig+0xa2>
 800134c:	4ba9      	ldr	r3, [pc, #676]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4ba8      	ldr	r3, [pc, #672]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	02c9      	lsls	r1, r1, #11
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	4ba6      	ldr	r3, [pc, #664]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4ba5      	ldr	r3, [pc, #660]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	0249      	lsls	r1, r1, #9
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0xba>
 800136a:	4ba2      	ldr	r3, [pc, #648]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4ba1      	ldr	r3, [pc, #644]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001370:	49a1      	ldr	r1, [pc, #644]	@ (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	4b9f      	ldr	r3, [pc, #636]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b9e      	ldr	r3, [pc, #632]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800137c:	499f      	ldr	r1, [pc, #636]	@ (80015fc <HAL_RCC_OscConfig+0x334>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d014      	beq.n	80013b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fc97 	bl	8000cbc <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fc92 	bl	8000cbc <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e28d      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a6:	4b93      	ldr	r3, [pc, #588]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	029b      	lsls	r3, r3, #10
 80013ae:	4013      	ands	r3, r2
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xcc>
 80013b2:	e015      	b.n	80013e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc82 	bl	8000cbc <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013be:	f7ff fc7d 	bl	8000cbc <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	@ 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e278      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d0:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	029b      	lsls	r3, r3, #10
 80013d8:	4013      	ands	r3, r2
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0xf6>
 80013dc:	e000      	b.n	80013e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2202      	movs	r2, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x124>
 80013ea:	e099      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ec:	4b81      	ldr	r3, [pc, #516]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2238      	movs	r2, #56	@ 0x38
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f6:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2203      	movs	r2, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x144>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d002      	beq.n	8001412 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d135      	bne.n	800147e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001412:	4b78      	ldr	r3, [pc, #480]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4013      	ands	r3, r2
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x162>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e24b      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b72      	ldr	r3, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a74      	ldr	r2, [pc, #464]	@ (8001600 <HAL_RCC_OscConfig+0x338>)
 8001430:	4013      	ands	r3, r2
 8001432:	0019      	movs	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	021a      	lsls	r2, r3, #8
 800143a:	4b6e      	ldr	r3, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d112      	bne.n	800146c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001446:	4b6b      	ldr	r3, [pc, #428]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6e      	ldr	r2, [pc, #440]	@ (8001604 <HAL_RCC_OscConfig+0x33c>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	4b67      	ldr	r3, [pc, #412]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800145a:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	0adb      	lsrs	r3, r3, #11
 8001460:	2207      	movs	r2, #7
 8001462:	4013      	ands	r3, r2
 8001464:	4a68      	ldr	r2, [pc, #416]	@ (8001608 <HAL_RCC_OscConfig+0x340>)
 8001466:	40da      	lsrs	r2, r3
 8001468:	4b68      	ldr	r3, [pc, #416]	@ (800160c <HAL_RCC_OscConfig+0x344>)
 800146a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800146c:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <HAL_RCC_OscConfig+0x348>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff fbc7 	bl	8000c04 <HAL_InitTick>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d051      	beq.n	800151e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e221      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d030      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001486:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5e      	ldr	r2, [pc, #376]	@ (8001604 <HAL_RCC_OscConfig+0x33c>)
 800148c:	4013      	ands	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800149a:	4b56      	ldr	r3, [pc, #344]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b55      	ldr	r3, [pc, #340]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	0049      	lsls	r1, r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc08 	bl	8000cbc <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc03 	bl	8000cbc <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1fe      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b4b      	ldr	r3, [pc, #300]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b48      	ldr	r3, [pc, #288]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001600 <HAL_RCC_OscConfig+0x338>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	021a      	lsls	r2, r3, #8
 80014e0:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	430a      	orrs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014e8:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	4949      	ldr	r1, [pc, #292]	@ (8001614 <HAL_RCC_OscConfig+0x34c>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbe2 	bl	8000cbc <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbdd 	bl	8000cbc <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1d8      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4013      	ands	r3, r2
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x236>
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2208      	movs	r2, #8
 8001526:	4013      	ands	r3, r2
 8001528:	d047      	beq.n	80015ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800152a:	4b32      	ldr	r3, [pc, #200]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2238      	movs	r2, #56	@ 0x38
 8001530:	4013      	ands	r3, r2
 8001532:	2b18      	cmp	r3, #24
 8001534:	d10a      	bne.n	800154c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001536:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d03c      	beq.n	80015ba <HAL_RCC_OscConfig+0x2f2>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d138      	bne.n	80015ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e1ba      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 8001556:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001558:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fbac 	bl	8000cbc <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fba7 	bl	8000cbc <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a2      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800157e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x2a2>
 8001586:	e018      	b.n	80015ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800158a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fb92 	bl	8000cbc <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fb8d 	bl	8000cbc <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e188      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2fe>
 80015c4:	e0c6      	b.n	8001754 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	231f      	movs	r3, #31
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2238      	movs	r2, #56	@ 0x38
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d11e      	bne.n	8001618 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x31e>
 80015e4:	e0b6      	b.n	8001754 <HAL_RCC_OscConfig+0x48c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d000      	beq.n	80015f0 <HAL_RCC_OscConfig+0x328>
 80015ee:	e0b1      	b.n	8001754 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e166      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
 80015f4:	40021000 	.word	0x40021000
 80015f8:	fffeffff 	.word	0xfffeffff
 80015fc:	fffbffff 	.word	0xfffbffff
 8001600:	ffff80ff 	.word	0xffff80ff
 8001604:	ffffc7ff 	.word	0xffffc7ff
 8001608:	00f42400 	.word	0x00f42400
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004
 8001614:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001618:	4bac      	ldr	r3, [pc, #688]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800161a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	055b      	lsls	r3, r3, #21
 8001620:	4013      	ands	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x362>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d011      	beq.n	8001652 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4ba7      	ldr	r3, [pc, #668]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001632:	4ba6      	ldr	r3, [pc, #664]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	0549      	lsls	r1, r1, #21
 8001638:	430a      	orrs	r2, r1
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800163c:	4ba3      	ldr	r3, [pc, #652]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800163e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	055b      	lsls	r3, r3, #21
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800164a:	231f      	movs	r3, #31
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b9f      	ldr	r3, [pc, #636]	@ (80018d0 <HAL_RCC_OscConfig+0x608>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165e:	4b9c      	ldr	r3, [pc, #624]	@ (80018d0 <HAL_RCC_OscConfig+0x608>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b9b      	ldr	r3, [pc, #620]	@ (80018d0 <HAL_RCC_OscConfig+0x608>)
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	0049      	lsls	r1, r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb26 	bl	8000cbc <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fb21 	bl	8000cbc <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e11c      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b91      	ldr	r3, [pc, #580]	@ (80018d0 <HAL_RCC_OscConfig+0x608>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4013      	ands	r3, r2
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x3e2>
 800169c:	4b8b      	ldr	r3, [pc, #556]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800169e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016a0:	4b8a      	ldr	r3, [pc, #552]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x41c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x404>
 80016b2:	4b86      	ldr	r3, [pc, #536]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016b6:	4b85      	ldr	r3, [pc, #532]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	430a      	orrs	r2, r1
 80016bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016be:	4b83      	ldr	r3, [pc, #524]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x41c>
 80016cc:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016d0:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016d8:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016dc:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80016de:	2104      	movs	r1, #4
 80016e0:	438a      	bics	r2, r1
 80016e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fae6 	bl	8000cbc <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f4:	e009      	b.n	800170a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fae1 	bl	8000cbc <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a74      	ldr	r2, [pc, #464]	@ (80018d4 <HAL_RCC_OscConfig+0x60c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0db      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b70      	ldr	r3, [pc, #448]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800170c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x42e>
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fad1 	bl	8000cbc <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171e:	e009      	b.n	8001734 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff facc 	bl	8000cbc <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a6a      	ldr	r2, [pc, #424]	@ (80018d4 <HAL_RCC_OscConfig+0x60c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0c6      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800173e:	231f      	movs	r3, #31
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b60      	ldr	r3, [pc, #384]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800174a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800174c:	4b5f      	ldr	r3, [pc, #380]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800174e:	4962      	ldr	r1, [pc, #392]	@ (80018d8 <HAL_RCC_OscConfig+0x610>)
 8001750:	400a      	ands	r2, r1
 8001752:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d100      	bne.n	800175e <HAL_RCC_OscConfig+0x496>
 800175c:	e0b0      	b.n	80018c0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175e:	4b5b      	ldr	r3, [pc, #364]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	2b10      	cmp	r3, #16
 8001768:	d100      	bne.n	800176c <HAL_RCC_OscConfig+0x4a4>
 800176a:	e078      	b.n	800185e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d153      	bne.n	800181c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b55      	ldr	r3, [pc, #340]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b54      	ldr	r3, [pc, #336]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800177a:	4958      	ldr	r1, [pc, #352]	@ (80018dc <HAL_RCC_OscConfig+0x614>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fa9c 	bl	8000cbc <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fa97 	bl	8000cbc <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e092      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	049b      	lsls	r3, r3, #18
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	@ (80018e0 <HAL_RCC_OscConfig+0x618>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	431a      	orrs	r2, r3
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017dc:	2180      	movs	r1, #128	@ 0x80
 80017de:	0449      	lsls	r1, r1, #17
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017e4:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	0549      	lsls	r1, r1, #21
 80017ee:	430a      	orrs	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa63 	bl	8000cbc <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa5e 	bl	8000cbc <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e059      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x534>
 800181a:	e051      	b.n	80018c0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001822:	492e      	ldr	r1, [pc, #184]	@ (80018dc <HAL_RCC_OscConfig+0x614>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa48 	bl	8000cbc <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa43 	bl	8000cbc <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03e      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	049b      	lsls	r3, r3, #18
 800184c:	4013      	ands	r3, r2
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 8001856:	4923      	ldr	r1, [pc, #140]	@ (80018e4 <HAL_RCC_OscConfig+0x61c>)
 8001858:	400a      	ands	r2, r1
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	e030      	b.n	80018c0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e02b      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_RCC_OscConfig+0x604>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2203      	movs	r2, #3
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	429a      	cmp	r2, r3
 800187c:	d11e      	bne.n	80018bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2270      	movs	r2, #112	@ 0x70
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d117      	bne.n	80018bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	23fe      	movs	r3, #254	@ 0xfe
 8001890:	01db      	lsls	r3, r3, #7
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d10e      	bne.n	80018bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	23f8      	movs	r3, #248	@ 0xf8
 80018a2:	039b      	lsls	r3, r3, #14
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0f5b      	lsrs	r3, r3, #29
 80018b2:	075a      	lsls	r2, r3, #29
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b008      	add	sp, #32
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
 80018d4:	00001388 	.word	0x00001388
 80018d8:	efffffff 	.word	0xefffffff
 80018dc:	feffffff 	.word	0xfeffffff
 80018e0:	1fc1808c 	.word	0x1fc1808c
 80018e4:	effefffc 	.word	0xeffefffc

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0e9      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2207      	movs	r2, #7
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d91e      	bls.n	8001948 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2207      	movs	r2, #7
 8001910:	4393      	bics	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	4b70      	ldr	r3, [pc, #448]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800191c:	f7ff f9ce 	bl	8000cbc <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001924:	e009      	b.n	800193a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7ff f9c9 	bl	8000cbc <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a6a      	ldr	r2, [pc, #424]	@ (8001adc <HAL_RCC_ClockConfig+0x1f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0ca      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193a:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2207      	movs	r2, #7
 8001940:	4013      	ands	r3, r2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d015      	beq.n	800197e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d006      	beq.n	800196a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800195c:	4b60      	ldr	r3, [pc, #384]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	21e0      	movs	r1, #224	@ 0xe0
 8001964:	01c9      	lsls	r1, r1, #7
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1fc>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b59      	ldr	r3, [pc, #356]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	d057      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001990:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	4013      	ands	r3, r2
 800199a:	d12b      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e097      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	049b      	lsls	r3, r3, #18
 80019b0:	4013      	ands	r3, r2
 80019b2:	d11f      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e08b      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	d113      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e07f      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d8:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e074      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e06d      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2207      	movs	r2, #7
 80019fa:	4393      	bics	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff f958 	bl	8000cbc <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7ff f953 	bl	8000cbc <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001adc <HAL_RCC_ClockConfig+0x1f4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e054      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2238      	movs	r2, #56	@ 0x38
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1ec      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d21e      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f930 	bl	8000cbc <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff f92b 	bl	8000cbc <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_RCC_ClockConfig+0x1f4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e02c      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_RCC_ClockConfig+0x200>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aa2:	f000 f829 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	0001      	movs	r1, r0
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	220f      	movs	r2, #15
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_RCC_ClockConfig+0x204>)
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	58d3      	ldr	r3, [r2, r3]
 8001ab8:	221f      	movs	r2, #31
 8001aba:	4013      	ands	r3, r2
 8001abc:	000a      	movs	r2, r1
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x208>)
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_ClockConfig+0x20c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff f89b 	bl	8000c04 <HAL_InitTick>
 8001ace:	0003      	movs	r3, r0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	fffff0ff 	.word	0xfffff0ff
 8001ae8:	ffff8fff 	.word	0xffff8fff
 8001aec:	08002f9c 	.word	0x08002f9c
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2238      	movs	r2, #56	@ 0x38
 8001b04:	4013      	ands	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0adb      	lsrs	r3, r3, #11
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	4835      	ldr	r0, [pc, #212]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b1e:	f7fe faef 	bl	8000100 <__udivsi3>
 8001b22:	0003      	movs	r3, r0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e05d      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2238      	movs	r2, #56	@ 0x38
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2238      	movs	r2, #56	@ 0x38
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d138      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d10d      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	4823      	ldr	r0, [pc, #140]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b68:	f7fe faca 	bl	8000100 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	227f      	movs	r2, #127	@ 0x7f
 8001b78:	4013      	ands	r3, r2
 8001b7a:	434b      	muls	r3, r1
 8001b7c:	617b      	str	r3, [r7, #20]
        break;
 8001b7e:	e00d      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b84:	f7fe fabc 	bl	8000100 <__udivsi3>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	227f      	movs	r2, #127	@ 0x7f
 8001b94:	4013      	ands	r3, r2
 8001b96:	434b      	muls	r3, r1
 8001b98:	617b      	str	r3, [r7, #20]
        break;
 8001b9a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0f5b      	lsrs	r3, r3, #29
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7fe faa7 	bl	8000100 <__udivsi3>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e015      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2238      	movs	r2, #56	@ 0x38
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d103      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2238      	movs	r2, #56	@ 0x38
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	d103      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bd8:	23fa      	movs	r3, #250	@ 0xfa
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	e001      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001be4:	693b      	ldr	r3, [r7, #16]
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b006      	add	sp, #24
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	00f42400 	.word	0x00f42400

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e04a      	b.n	8001ca0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223d      	movs	r2, #61	@ 0x3d
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	223c      	movs	r2, #60	@ 0x3c
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7fe fed3 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	223d      	movs	r2, #61	@ 0x3d
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	0019      	movs	r1, r3
 8001c38:	0010      	movs	r0, r2
 8001c3a:	f000 fd27 	bl	800268c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2248      	movs	r2, #72	@ 0x48
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223e      	movs	r2, #62	@ 0x3e
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	223f      	movs	r2, #63	@ 0x3f
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2240      	movs	r2, #64	@ 0x40
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2241      	movs	r2, #65	@ 0x41
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2242      	movs	r2, #66	@ 0x42
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2243      	movs	r2, #67	@ 0x43
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2244      	movs	r2, #68	@ 0x44
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2245      	movs	r2, #69	@ 0x45
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2246      	movs	r2, #70	@ 0x46
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2247      	movs	r2, #71	@ 0x47
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223d      	movs	r2, #61	@ 0x3d
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	223d      	movs	r2, #61	@ 0x3d
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e037      	b.n	8001d30 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	223d      	movs	r2, #61	@ 0x3d
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <HAL_TIM_Base_Start_IT+0x90>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x44>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a15      	ldr	r2, [pc, #84]	@ (8001d3c <HAL_TIM_Base_Start_IT+0x94>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d116      	bne.n	8001d1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	@ (8001d40 <HAL_TIM_Base_Start_IT+0x98>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d016      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x84>
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d011      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d18:	e008      	b.n	8001d2c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e000      	b.n	8001d2e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	00010007 	.word	0x00010007

08001d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e04a      	b.n	8001dec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	223d      	movs	r2, #61	@ 0x3d
 8001d5a:	5c9b      	ldrb	r3, [r3, r2]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223c      	movs	r2, #60	@ 0x3c
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7fe fda1 	bl	80008b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	223d      	movs	r2, #61	@ 0x3d
 8001d76:	2102      	movs	r1, #2
 8001d78:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	0019      	movs	r1, r3
 8001d84:	0010      	movs	r0, r2
 8001d86:	f000 fc81 	bl	800268c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2248      	movs	r2, #72	@ 0x48
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	223e      	movs	r2, #62	@ 0x3e
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	223f      	movs	r2, #63	@ 0x3f
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2240      	movs	r2, #64	@ 0x40
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2241      	movs	r2, #65	@ 0x41
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2242      	movs	r2, #66	@ 0x42
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2243      	movs	r2, #67	@ 0x43
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2244      	movs	r2, #68	@ 0x44
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2245      	movs	r2, #69	@ 0x45
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2246      	movs	r2, #70	@ 0x46
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2247      	movs	r2, #71	@ 0x47
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	223d      	movs	r2, #61	@ 0x3d
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d108      	bne.n	8001e16 <HAL_TIM_PWM_Start+0x22>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	223e      	movs	r2, #62	@ 0x3e
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	1e5a      	subs	r2, r3, #1
 8001e10:	4193      	sbcs	r3, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	e037      	b.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d108      	bne.n	8001e2e <HAL_TIM_PWM_Start+0x3a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	223f      	movs	r2, #63	@ 0x3f
 8001e20:	5c9b      	ldrb	r3, [r3, r2]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	4193      	sbcs	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	e02b      	b.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d108      	bne.n	8001e46 <HAL_TIM_PWM_Start+0x52>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	5c9b      	ldrb	r3, [r3, r2]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	1e5a      	subs	r2, r3, #1
 8001e40:	4193      	sbcs	r3, r2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	e01f      	b.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d108      	bne.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2241      	movs	r2, #65	@ 0x41
 8001e50:	5c9b      	ldrb	r3, [r3, r2]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	4193      	sbcs	r3, r2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e013      	b.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d108      	bne.n	8001e76 <HAL_TIM_PWM_Start+0x82>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2242      	movs	r2, #66	@ 0x42
 8001e68:	5c9b      	ldrb	r3, [r3, r2]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	4193      	sbcs	r3, r2
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	e007      	b.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2243      	movs	r2, #67	@ 0x43
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	4193      	sbcs	r3, r2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07b      	b.n	8001f86 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	223e      	movs	r2, #62	@ 0x3e
 8001e98:	2102      	movs	r1, #2
 8001e9a:	5499      	strb	r1, [r3, r2]
 8001e9c:	e023      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xf2>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Start+0xba>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	223f      	movs	r2, #63	@ 0x3f
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	5499      	strb	r1, [r3, r2]
 8001eac:	e01b      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xf2>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Start+0xca>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	2102      	movs	r1, #2
 8001eba:	5499      	strb	r1, [r3, r2]
 8001ebc:	e013      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xf2>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_PWM_Start+0xda>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2241      	movs	r2, #65	@ 0x41
 8001ec8:	2102      	movs	r1, #2
 8001eca:	5499      	strb	r1, [r3, r2]
 8001ecc:	e00b      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xf2>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d104      	bne.n	8001ede <HAL_TIM_PWM_Start+0xea>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2242      	movs	r2, #66	@ 0x42
 8001ed8:	2102      	movs	r1, #2
 8001eda:	5499      	strb	r1, [r3, r2]
 8001edc:	e003      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xf2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2243      	movs	r2, #67	@ 0x43
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 fee2 	bl	8002cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <HAL_TIM_PWM_Start+0x19c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x11e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_TIM_PWM_Start+0x1a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x11e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_TIM_PWM_Start+0x1a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_PWM_Start+0x122>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_PWM_Start+0x124>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	0209      	lsls	r1, r1, #8
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_TIM_PWM_Start+0x19c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_TIM_PWM_Start+0x14e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_TIM_PWM_Start+0x1a8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d116      	bne.n	8001f70 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a15      	ldr	r2, [pc, #84]	@ (8001fa0 <HAL_TIM_PWM_Start+0x1ac>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d016      	beq.n	8001f82 <HAL_TIM_PWM_Start+0x18e>
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	025b      	lsls	r3, r3, #9
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d011      	beq.n	8001f82 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	e008      	b.n	8001f82 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e000      	b.n	8001f84 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	00010007 	.word	0x00010007

08001fa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e090      	b.n	80020da <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	223d      	movs	r2, #61	@ 0x3d
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223c      	movs	r2, #60	@ 0x3c
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7fe fc90 	bl	80008f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	223d      	movs	r2, #61	@ 0x3d
 8001fd8:	2102      	movs	r1, #2
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	493f      	ldr	r1, [pc, #252]	@ (80020e4 <HAL_TIM_Encoder_Init+0x140>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	f000 fb48 	bl	800268c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4a31      	ldr	r2, [pc, #196]	@ (80020e8 <HAL_TIM_Encoder_Init+0x144>)
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	4313      	orrs	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4a2c      	ldr	r2, [pc, #176]	@ (80020ec <HAL_TIM_Encoder_Init+0x148>)
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_TIM_Encoder_Init+0x14c>)
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	4313      	orrs	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	011a      	lsls	r2, r3, #4
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	031b      	lsls	r3, r3, #12
 8002066:	4313      	orrs	r3, r2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2222      	movs	r2, #34	@ 0x22
 8002072:	4393      	bics	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2288      	movs	r2, #136	@ 0x88
 800207a:	4393      	bics	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4313      	orrs	r3, r2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2248      	movs	r2, #72	@ 0x48
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	223e      	movs	r2, #62	@ 0x3e
 80020b4:	2101      	movs	r1, #1
 80020b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	223f      	movs	r2, #63	@ 0x3f
 80020bc:	2101      	movs	r1, #1
 80020be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2244      	movs	r2, #68	@ 0x44
 80020c4:	2101      	movs	r1, #1
 80020c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2245      	movs	r2, #69	@ 0x45
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	223d      	movs	r2, #61	@ 0x3d
 80020d4:	2101      	movs	r1, #1
 80020d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b006      	add	sp, #24
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	fffebff8 	.word	0xfffebff8
 80020e8:	fffffcfc 	.word	0xfffffcfc
 80020ec:	fffff3f3 	.word	0xfffff3f3
 80020f0:	ffff0f0f 	.word	0xffff0f0f

080020f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80020fe:	200f      	movs	r0, #15
 8002100:	183b      	adds	r3, r7, r0
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	213e      	movs	r1, #62	@ 0x3e
 8002106:	5c52      	ldrb	r2, [r2, r1]
 8002108:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800210a:	230e      	movs	r3, #14
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	213f      	movs	r1, #63	@ 0x3f
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002116:	240d      	movs	r4, #13
 8002118:	193b      	adds	r3, r7, r4
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	2144      	movs	r1, #68	@ 0x44
 800211e:	5c52      	ldrb	r2, [r2, r1]
 8002120:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002122:	230c      	movs	r3, #12
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	2145      	movs	r1, #69	@ 0x45
 800212a:	5c52      	ldrb	r2, [r2, r1]
 800212c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d112      	bne.n	800215a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002134:	183b      	adds	r3, r7, r0
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d103      	bne.n	8002144 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800213c:	193b      	adds	r3, r7, r4
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e075      	b.n	8002234 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	223e      	movs	r2, #62	@ 0x3e
 800214c:	2102      	movs	r1, #2
 800214e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2244      	movs	r2, #68	@ 0x44
 8002154:	2102      	movs	r1, #2
 8002156:	5499      	strb	r1, [r3, r2]
 8002158:	e03d      	b.n	80021d6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d114      	bne.n	800218a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002160:	230e      	movs	r3, #14
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d104      	bne.n	8002174 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800216a:	230c      	movs	r3, #12
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e05d      	b.n	8002234 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	223f      	movs	r2, #63	@ 0x3f
 800217c:	2102      	movs	r1, #2
 800217e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2245      	movs	r2, #69	@ 0x45
 8002184:	2102      	movs	r1, #2
 8002186:	5499      	strb	r1, [r3, r2]
 8002188:	e025      	b.n	80021d6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800218a:	230f      	movs	r3, #15
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10e      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002194:	230e      	movs	r3, #14
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d109      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800219e:	230d      	movs	r3, #13
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021a8:	230c      	movs	r3, #12
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e03e      	b.n	8002234 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223e      	movs	r2, #62	@ 0x3e
 80021ba:	2102      	movs	r1, #2
 80021bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	223f      	movs	r2, #63	@ 0x3f
 80021c2:	2102      	movs	r1, #2
 80021c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2244      	movs	r2, #68	@ 0x44
 80021ca:	2102      	movs	r1, #2
 80021cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2245      	movs	r2, #69	@ 0x45
 80021d2:	2102      	movs	r1, #2
 80021d4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_TIM_Encoder_Start+0xf0>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d008      	beq.n	80021f4 <HAL_TIM_Encoder_Start+0x100>
 80021e2:	e00f      	b.n	8002204 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	2100      	movs	r1, #0
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fd63 	bl	8002cb8 <TIM_CCxChannelCmd>
      break;
 80021f2:	e016      	b.n	8002222 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	2104      	movs	r1, #4
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fd5b 	bl	8002cb8 <TIM_CCxChannelCmd>
      break;
 8002202:	e00e      	b.n	8002222 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	2100      	movs	r1, #0
 800220c:	0018      	movs	r0, r3
 800220e:	f000 fd53 	bl	8002cb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	0018      	movs	r0, r3
 800221c:	f000 fd4c 	bl	8002cb8 <TIM_CCxChannelCmd>
      break;
 8002220:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b005      	add	sp, #20
 800223a:	bd90      	pop	{r4, r7, pc}

0800223c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d021      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d01d      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2203      	movs	r2, #3
 800226a:	4252      	negs	r2, r2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2203      	movs	r2, #3
 800227c:	4013      	ands	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f9ea 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 8002288:	e007      	b.n	800229a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f9dd 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f9e9 	bl	800266c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2204      	movs	r2, #4
 80022a4:	4013      	ands	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2204      	movs	r2, #4
 80022ac:	4013      	ands	r3, r2
 80022ae:	d01e      	beq.n	80022ee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2205      	movs	r2, #5
 80022b6:	4252      	negs	r2, r2
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	23c0      	movs	r3, #192	@ 0xc0
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 f9c3 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f9b6 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f9c2 	bl	800266c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2208      	movs	r2, #8
 80022f2:	4013      	ands	r3, r2
 80022f4:	d021      	beq.n	800233a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2208      	movs	r2, #8
 80022fa:	4013      	ands	r3, r2
 80022fc:	d01d      	beq.n	800233a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2209      	movs	r2, #9
 8002304:	4252      	negs	r2, r2
 8002306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2204      	movs	r2, #4
 800230c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2203      	movs	r2, #3
 8002316:	4013      	ands	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f99d 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 8002322:	e007      	b.n	8002334 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f990 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f99c 	bl	800266c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2210      	movs	r2, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2210      	movs	r2, #16
 8002346:	4013      	ands	r3, r2
 8002348:	d01e      	beq.n	8002388 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2211      	movs	r2, #17
 8002350:	4252      	negs	r2, r2
 8002352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2208      	movs	r2, #8
 8002358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	23c0      	movs	r3, #192	@ 0xc0
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f976 	bl	800265c <HAL_TIM_IC_CaptureCallback>
 8002370:	e007      	b.n	8002382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f969 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f975 	bl	800266c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d00c      	beq.n	80023aa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d008      	beq.n	80023aa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2202      	movs	r2, #2
 800239e:	4252      	negs	r2, r2
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fe fa2f 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2280      	movs	r2, #128	@ 0x80
 80023ae:	4013      	ands	r3, r2
 80023b0:	d104      	bne.n	80023bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023ba:	d00b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2280      	movs	r2, #128	@ 0x80
 80023c0:	4013      	ands	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002444 <HAL_TIM_IRQHandler+0x208>)
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fd9c 	bl	8002f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	4013      	ands	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_TIM_IRQHandler+0x20c>)
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fd93 	bl	8002f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2240      	movs	r2, #64	@ 0x40
 80023fa:	4013      	ands	r3, r2
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2240      	movs	r2, #64	@ 0x40
 8002402:	4013      	ands	r3, r2
 8002404:	d008      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2241      	movs	r2, #65	@ 0x41
 800240c:	4252      	negs	r2, r2
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f932 	bl	800267c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2220      	movs	r2, #32
 800241c:	4013      	ands	r3, r2
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	4013      	ands	r3, r2
 8002426:	d008      	beq.n	800243a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2221      	movs	r2, #33	@ 0x21
 800242e:	4252      	negs	r2, r2
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fd61 	bl	8002efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	ffffdf7f 	.word	0xffffdf7f
 8002448:	fffffeff 	.word	0xfffffeff

0800244c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	223c      	movs	r2, #60	@ 0x3c
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_TIM_PWM_ConfigChannel+0x22>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e5      	b.n	800263a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	223c      	movs	r2, #60	@ 0x3c
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b14      	cmp	r3, #20
 800247a:	d900      	bls.n	800247e <HAL_TIM_PWM_ConfigChannel+0x32>
 800247c:	e0d1      	b.n	8002622 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	0011      	movs	r1, r2
 8002492:	0018      	movs	r0, r3
 8002494:	f000 f974 	bl	8002780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2108      	movs	r1, #8
 80024a4:	430a      	orrs	r2, r1
 80024a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2104      	movs	r1, #4
 80024b4:	438a      	bics	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6999      	ldr	r1, [r3, #24]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	619a      	str	r2, [r3, #24]
      break;
 80024ca:	e0af      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f9d3 	bl	8002880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2180      	movs	r1, #128	@ 0x80
 80024e6:	0109      	lsls	r1, r1, #4
 80024e8:	430a      	orrs	r2, r1
 80024ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4954      	ldr	r1, [pc, #336]	@ (8002648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	021a      	lsls	r2, r3, #8
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	619a      	str	r2, [r3, #24]
      break;
 8002510:	e08c      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fa2e 	bl	800297c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2108      	movs	r1, #8
 800252c:	430a      	orrs	r2, r1
 800252e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2104      	movs	r1, #4
 800253c:	438a      	bics	r2, r1
 800253e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69d9      	ldr	r1, [r3, #28]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
      break;
 8002552:	e06b      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fa8f 	bl	8002a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	0109      	lsls	r1, r1, #4
 8002570:	430a      	orrs	r2, r1
 8002572:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4932      	ldr	r1, [pc, #200]	@ (8002648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002580:	400a      	ands	r2, r1
 8002582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69d9      	ldr	r1, [r3, #28]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	021a      	lsls	r2, r3, #8
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	61da      	str	r2, [r3, #28]
      break;
 8002598:	e048      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	0011      	movs	r1, r2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 fad0 	bl	8002b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2108      	movs	r1, #8
 80025b4:	430a      	orrs	r2, r1
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2104      	movs	r1, #4
 80025c4:	438a      	bics	r2, r1
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80025da:	e027      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 fb09 	bl	8002bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	0109      	lsls	r1, r1, #4
 80025f8:	430a      	orrs	r2, r1
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4910      	ldr	r1, [pc, #64]	@ (8002648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002608:	400a      	ands	r2, r1
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	021a      	lsls	r2, r3, #8
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002620:	e004      	b.n	800262c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002622:	2317      	movs	r3, #23
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	223c      	movs	r2, #60	@ 0x3c
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

  return status;
 8002634:	2317      	movs	r3, #23
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b006      	add	sp, #24
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	08002fdc 	.word	0x08002fdc
 8002648:	fffffbff 	.word	0xfffffbff

0800264c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a32      	ldr	r2, [pc, #200]	@ (8002768 <TIM_Base_SetConfig+0xdc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x20>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a31      	ldr	r2, [pc, #196]	@ (800276c <TIM_Base_SetConfig+0xe0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2270      	movs	r2, #112	@ 0x70
 80026b0:	4393      	bics	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a29      	ldr	r2, [pc, #164]	@ (8002768 <TIM_Base_SetConfig+0xdc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00f      	beq.n	80026e6 <TIM_Base_SetConfig+0x5a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a28      	ldr	r2, [pc, #160]	@ (800276c <TIM_Base_SetConfig+0xe0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <TIM_Base_SetConfig+0x5a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a27      	ldr	r2, [pc, #156]	@ (8002770 <TIM_Base_SetConfig+0xe4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <TIM_Base_SetConfig+0x5a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <TIM_Base_SetConfig+0xe8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d003      	beq.n	80026e6 <TIM_Base_SetConfig+0x5a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a25      	ldr	r2, [pc, #148]	@ (8002778 <TIM_Base_SetConfig+0xec>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a24      	ldr	r2, [pc, #144]	@ (800277c <TIM_Base_SetConfig+0xf0>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	4393      	bics	r3, r2
 80026fe:	001a      	movs	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <TIM_Base_SetConfig+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <TIM_Base_SetConfig+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <TIM_Base_SetConfig+0xe8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <TIM_Base_SetConfig+0xaa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a11      	ldr	r2, [pc, #68]	@ (8002778 <TIM_Base_SetConfig+0xec>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d103      	bne.n	800273e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2201      	movs	r2, #1
 8002756:	4393      	bics	r3, r2
 8002758:	001a      	movs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]
  }
}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400
 8002770:	40002000 	.word	0x40002000
 8002774:	40014400 	.word	0x40014400
 8002778:	40014800 	.word	0x40014800
 800277c:	fffffcff 	.word	0xfffffcff

08002780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	2201      	movs	r2, #1
 8002796:	4393      	bics	r3, r2
 8002798:	001a      	movs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002868 <TIM_OC1_SetConfig+0xe8>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4393      	bics	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2202      	movs	r2, #2
 80027c8:	4393      	bics	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a24      	ldr	r2, [pc, #144]	@ (800286c <TIM_OC1_SetConfig+0xec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_OC1_SetConfig+0x6e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a23      	ldr	r2, [pc, #140]	@ (8002870 <TIM_OC1_SetConfig+0xf0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_OC1_SetConfig+0x6e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <TIM_OC1_SetConfig+0xf4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10c      	bne.n	8002808 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4393      	bics	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2204      	movs	r2, #4
 8002804:	4393      	bics	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a18      	ldr	r2, [pc, #96]	@ (800286c <TIM_OC1_SetConfig+0xec>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_OC1_SetConfig+0xa0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <TIM_OC1_SetConfig+0xf0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_OC1_SetConfig+0xa0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <TIM_OC1_SetConfig+0xf4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <TIM_OC1_SetConfig+0xf8>)
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4a14      	ldr	r2, [pc, #80]	@ (800287c <TIM_OC1_SetConfig+0xfc>)
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b006      	add	sp, #24
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	fffeff8f 	.word	0xfffeff8f
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800
 8002878:	fffffeff 	.word	0xfffffeff
 800287c:	fffffdff 	.word	0xfffffdff

08002880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2210      	movs	r2, #16
 8002896:	4393      	bics	r3, r2
 8002898:	001a      	movs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <TIM_OC2_SetConfig+0xe0>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002964 <TIM_OC2_SetConfig+0xe4>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2220      	movs	r2, #32
 80028ca:	4393      	bics	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a22      	ldr	r2, [pc, #136]	@ (8002968 <TIM_OC2_SetConfig+0xe8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	4393      	bics	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2240      	movs	r2, #64	@ 0x40
 80028fa:	4393      	bics	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <TIM_OC2_SetConfig+0xe8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_OC2_SetConfig+0x96>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a18      	ldr	r2, [pc, #96]	@ (800296c <TIM_OC2_SetConfig+0xec>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_OC2_SetConfig+0x96>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <TIM_OC2_SetConfig+0xf0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d113      	bne.n	800293e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <TIM_OC2_SetConfig+0xf4>)
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <TIM_OC2_SetConfig+0xf8>)
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}
 8002960:	feff8fff 	.word	0xfeff8fff
 8002964:	fffffcff 	.word	0xfffffcff
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800
 8002974:	fffffbff 	.word	0xfffffbff
 8002978:	fffff7ff 	.word	0xfffff7ff

0800297c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <TIM_OC3_SetConfig+0xdc>)
 8002992:	401a      	ands	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a5c <TIM_OC3_SetConfig+0xe0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2203      	movs	r2, #3
 80029b0:	4393      	bics	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a27      	ldr	r2, [pc, #156]	@ (8002a60 <TIM_OC3_SetConfig+0xe4>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a23      	ldr	r2, [pc, #140]	@ (8002a64 <TIM_OC3_SetConfig+0xe8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a22      	ldr	r2, [pc, #136]	@ (8002a68 <TIM_OC3_SetConfig+0xec>)
 80029de:	4013      	ands	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <TIM_OC3_SetConfig+0xf0>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <TIM_OC3_SetConfig+0xe8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <TIM_OC3_SetConfig+0x92>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <TIM_OC3_SetConfig+0xf4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_OC3_SetConfig+0x92>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <TIM_OC3_SetConfig+0xf8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <TIM_OC3_SetConfig+0xfc>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <TIM_OC3_SetConfig+0x100>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b006      	add	sp, #24
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	fffffeff 	.word	0xfffffeff
 8002a5c:	fffeff8f 	.word	0xfffeff8f
 8002a60:	fffffdff 	.word	0xfffffdff
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	fffff7ff 	.word	0xfffff7ff
 8002a6c:	fffffbff 	.word	0xfffffbff
 8002a70:	40014400 	.word	0x40014400
 8002a74:	40014800 	.word	0x40014800
 8002a78:	ffffefff 	.word	0xffffefff
 8002a7c:	ffffdfff 	.word	0xffffdfff

08002a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <TIM_OC4_SetConfig+0xa8>)
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <TIM_OC4_SetConfig+0xac>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <TIM_OC4_SetConfig+0xb0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b34 <TIM_OC4_SetConfig+0xb4>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	031b      	lsls	r3, r3, #12
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <TIM_OC4_SetConfig+0xb8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <TIM_OC4_SetConfig+0x70>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	@ (8002b3c <TIM_OC4_SetConfig+0xbc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_OC4_SetConfig+0x70>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <TIM_OC4_SetConfig+0xc0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <TIM_OC4_SetConfig+0xc4>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	019b      	lsls	r3, r3, #6
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b006      	add	sp, #24
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	ffffefff 	.word	0xffffefff
 8002b2c:	feff8fff 	.word	0xfeff8fff
 8002b30:	fffffcff 	.word	0xfffffcff
 8002b34:	ffffdfff 	.word	0xffffdfff
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800
 8002b44:	ffffbfff 	.word	0xffffbfff

08002b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a21      	ldr	r2, [pc, #132]	@ (8002be4 <TIM_OC5_SetConfig+0x9c>)
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <TIM_OC5_SetConfig+0xa0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <TIM_OC5_SetConfig+0xa4>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <TIM_OC5_SetConfig+0xa8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_OC5_SetConfig+0x66>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <TIM_OC5_SetConfig+0xac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_OC5_SetConfig+0x66>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <TIM_OC5_SetConfig+0xb0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d109      	bne.n	8002bc2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <TIM_OC5_SetConfig+0x9c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	fffeff8f 	.word	0xfffeff8f
 8002bec:	fffdffff 	.word	0xfffdffff
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800

08002bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <TIM_OC6_SetConfig+0xa0>)
 8002c12:	401a      	ands	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca0 <TIM_OC6_SetConfig+0xa4>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <TIM_OC6_SetConfig+0xa8>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ca8 <TIM_OC6_SetConfig+0xac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_OC6_SetConfig+0x68>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <TIM_OC6_SetConfig+0xb0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_OC6_SetConfig+0x68>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <TIM_OC6_SetConfig+0xb4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d109      	bne.n	8002c78 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <TIM_OC6_SetConfig+0xb8>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	ffefffff 	.word	0xffefffff
 8002ca0:	feff8fff 	.word	0xfeff8fff
 8002ca4:	ffdfffff 	.word	0xffdfffff
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800
 8002cb4:	fffbffff 	.word	0xfffbffff

08002cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	0013      	movs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	43d2      	mvns	r2, r2
 8002cda:	401a      	ands	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	211f      	movs	r1, #31
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4099      	lsls	r1, r3
 8002cee:	000b      	movs	r3, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223c      	movs	r2, #60	@ 0x3c
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e04a      	b.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223c      	movs	r2, #60	@ 0x3c
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223d      	movs	r2, #61	@ 0x3d
 8002d24:	2102      	movs	r1, #2
 8002d26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2270      	movs	r2, #112	@ 0x70
 8002d58:	4393      	bics	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a11      	ldr	r2, [pc, #68]	@ (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10c      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2280      	movs	r2, #128	@ 0x80
 8002d86:	4393      	bics	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	223d      	movs	r2, #61	@ 0x3d
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	223c      	movs	r2, #60	@ 0x3c
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	ff0fffff 	.word	0xff0fffff
 8002dc0:	40000400 	.word	0x40000400

08002dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	@ 0x3c
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e06f      	b.n	8002ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	@ 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	22ff      	movs	r2, #255	@ 0xff
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a33      	ldr	r2, [pc, #204]	@ (8002ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002e18:	401a      	ands	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002e26:	401a      	ands	r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a29      	ldr	r2, [pc, #164]	@ (8002ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002e34:	401a      	ands	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a26      	ldr	r2, [pc, #152]	@ (8002edc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002e42:	401a      	ands	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002e50:	401a      	ands	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002e60:	401a      	ands	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d11c      	bne.n	8002eae <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002e78:	401a      	ands	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002e88:	401a      	ands	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002e96:	401a      	ands	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	@ 0x3c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	fffffcff 	.word	0xfffffcff
 8002ecc:	fffffbff 	.word	0xfffffbff
 8002ed0:	fffff7ff 	.word	0xfffff7ff
 8002ed4:	ffffefff 	.word	0xffffefff
 8002ed8:	ffffdfff 	.word	0xffffdfff
 8002edc:	ffffbfff 	.word	0xffffbfff
 8002ee0:	fff0ffff 	.word	0xfff0ffff
 8002ee4:	efffffff 	.word	0xefffffff
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	ff0fffff 	.word	0xff0fffff
 8002ef0:	feffffff 	.word	0xfeffffff
 8002ef4:	fdffffff 	.word	0xfdffffff
 8002ef8:	dfffffff 	.word	0xdfffffff

08002efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <memset>:
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	1882      	adds	r2, r0, r2
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <memset+0xa>
 8002f34:	4770      	bx	lr
 8002f36:	7019      	strb	r1, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	e7f9      	b.n	8002f30 <memset+0x4>

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2600      	movs	r6, #0
 8002f40:	4c0c      	ldr	r4, [pc, #48]	@ (8002f74 <__libc_init_array+0x38>)
 8002f42:	4d0d      	ldr	r5, [pc, #52]	@ (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1b64      	subs	r4, r4, r5
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	2600      	movs	r6, #0
 8002f4e:	f000 f819 	bl	8002f84 <_init>
 8002f52:	4c0a      	ldr	r4, [pc, #40]	@ (8002f7c <__libc_init_array+0x40>)
 8002f54:	4d0a      	ldr	r5, [pc, #40]	@ (8002f80 <__libc_init_array+0x44>)
 8002f56:	1b64      	subs	r4, r4, r5
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	00b3      	lsls	r3, r6, #2
 8002f62:	58eb      	ldr	r3, [r5, r3]
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	00b3      	lsls	r3, r6, #2
 8002f6c:	58eb      	ldr	r3, [r5, r3]
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08003030 	.word	0x08003030
 8002f78:	08003030 	.word	0x08003030
 8002f7c:	08003034 	.word	0x08003034
 8002f80:	08003030 	.word	0x08003030

08002f84 <_init>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr

08002f90 <_fini>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr
