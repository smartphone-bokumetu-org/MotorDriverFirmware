
firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e1c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f68  08002f68  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f68  08002f68  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f68  08002f68  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f68  08002f68  00003f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f6c  08002f6c  00003f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08002f7c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002f7c  00004168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009596  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018df  00000000  00000000  0000d5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0000eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fa  00000000  00000000  0000f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d7f  00000000  00000000  000100f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b071  00000000  00000000  00023e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807a9  00000000  00000000  0002eee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af68b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  000af6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b1ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002ebc 	.word	0x08002ebc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002ebc 	.word	0x08002ebc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc8c 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f844 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa54 	bl	80006d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f940 	bl	80004ac <MX_TIM3_Init>
  MX_TIM16_Init();
 800022c:	f000 f9c8 	bl	80005c0 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000230:	f000 f890 	bl	8000354 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000234:	f000 f99e 	bl	8000574 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000238:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <main+0x80>)
 800023a:	213c      	movs	r1, #60	@ 0x3c
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fef5 	bl	800202c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000242:	4b16      	ldr	r3, [pc, #88]	@ (800029c <main+0x84>)
 8000244:	2100      	movs	r1, #0
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fd70 	bl	8001d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <main+0x88>)
 800024e:	2108      	movs	r1, #8
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fd6b 	bl	8001d2c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8000256:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <main+0x8c>)
 8000258:	0018      	movs	r0, r3
 800025a:	f001 fcc1 	bl	8001be0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(duty>0){ //dutyMax 800
 800025e:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <main+0x90>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	dd09      	ble.n	800027a <main+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <main+0x90>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <main+0x88>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	635a      	str	r2, [r3, #52]	@ 0x34
 8000278:	e009      	b.n	800028e <main+0x76>
	  }else{
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x88>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2200      	movs	r2, #0
 8000280:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, -1 * duty);
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <main+0x90>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	425a      	negs	r2, r3
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <main+0x84>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  HAL_Delay(100);
 800028e:	2064      	movs	r0, #100	@ 0x64
 8000290:	f000 fcd8 	bl	8000c44 <HAL_Delay>
	  if(duty>0){ //dutyMax 800
 8000294:	e7e3      	b.n	800025e <main+0x46>
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	20000074 	.word	0x20000074
 800029c:	2000010c 	.word	0x2000010c
 80002a0:	20000028 	.word	0x20000028
 80002a4:	200000c0 	.word	0x200000c0
 80002a8:	20000160 	.word	0x20000160

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b093      	sub	sp, #76	@ 0x4c
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2414      	movs	r4, #20
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2334      	movs	r3, #52	@ 0x34
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 fdd1 	bl	8002e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f002 fdca 	bl	8002e64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d0:	2380      	movs	r3, #128	@ 0x80
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ff53 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2201      	movs	r2, #1
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	22a0      	movs	r2, #160	@ 0xa0
 80002e4:	02d2      	lsls	r2, r2, #11
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	0021      	movs	r1, r4
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2203      	movs	r2, #3
 80002f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2208      	movs	r2, #8
 8000300:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2280      	movs	r2, #128	@ 0x80
 8000306:	0292      	lsls	r2, r2, #10
 8000308:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	0592      	lsls	r2, r2, #22
 8000310:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	0018      	movs	r0, r3
 8000316:	f000 ff73 	bl	8001200 <HAL_RCC_OscConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800031e:	f000 fa59 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2207      	movs	r2, #7
 8000326:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2202      	movs	r2, #2
 800032c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fa6e 	bl	8001820 <HAL_RCC_ClockConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000348:	f000 fa44 	bl	80007d4 <Error_Handler>
  }
}
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b013      	add	sp, #76	@ 0x4c
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b098      	sub	sp, #96	@ 0x60
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035a:	2354      	movs	r3, #84	@ 0x54
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	230c      	movs	r3, #12
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f002 fd7d 	bl	8002e64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800036a:	2338      	movs	r3, #56	@ 0x38
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	0018      	movs	r0, r3
 8000370:	231c      	movs	r3, #28
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f002 fd75 	bl	8002e64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	2334      	movs	r3, #52	@ 0x34
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f002 fd6e 	bl	8002e64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000388:	4b45      	ldr	r3, [pc, #276]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 800038a:	4a46      	ldr	r2, [pc, #280]	@ (80004a4 <MX_TIM1_Init+0x150>)
 800038c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800038e:	4b44      	ldr	r3, [pc, #272]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 8000390:	2203      	movs	r2, #3
 8000392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000394:	4b42      	ldr	r3, [pc, #264]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800-1;
 800039a:	4b41      	ldr	r3, [pc, #260]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 800039c:	4a42      	ldr	r2, [pc, #264]	@ (80004a8 <MX_TIM1_Init+0x154>)
 800039e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b3f      	ldr	r3, [pc, #252]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003a6:	4b3e      	ldr	r3, [pc, #248]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ac:	4b3c      	ldr	r3, [pc, #240]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b2:	4b3b      	ldr	r3, [pc, #236]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc61 	bl	8001c7c <HAL_TIM_PWM_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 fa09 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2154      	movs	r1, #84	@ 0x54
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d6:	187a      	adds	r2, r7, r1
 80003d8:	4b31      	ldr	r3, [pc, #196]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fc2b 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003e6:	f000 f9f5 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ea:	2138      	movs	r1, #56	@ 0x38
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2260      	movs	r2, #96	@ 0x60
 80003f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000416:	1879      	adds	r1, r7, r1
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 800041a:	2208      	movs	r2, #8
 800041c:	0018      	movs	r0, r3
 800041e:	f001 ffb1 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000426:	f000 f9d5 	bl	80007d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	0192      	lsls	r2, r2, #6
 800044e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0492      	lsls	r2, r2, #18
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f002 fc3a 	bl	8002cfc <HAL_TIMEx_ConfigBreakDeadTime>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800048c:	f000 f9a2 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000490:	4b03      	ldr	r3, [pc, #12]	@ (80004a0 <MX_TIM1_Init+0x14c>)
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fa92 	bl	80009bc <HAL_TIM_MspPostInit>

}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b018      	add	sp, #96	@ 0x60
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000028 	.word	0x20000028
 80004a4:	40012c00 	.word	0x40012c00
 80004a8:	0000031f 	.word	0x0000031f

080004ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08d      	sub	sp, #52	@ 0x34
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2324      	movs	r3, #36	@ 0x24
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 fcd1 	bl	8002e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	230c      	movs	r3, #12
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f002 fcca 	bl	8002e64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004d2:	4a26      	ldr	r2, [pc, #152]	@ (800056c <MX_TIM3_Init+0xc0>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004d6:	4b24      	ldr	r3, [pc, #144]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004e2:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004e4:	4a22      	ldr	r2, [pc, #136]	@ (8000570 <MX_TIM3_Init+0xc4>)
 80004e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <MX_TIM3_Init+0xbc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2201      	movs	r2, #1
 8000506:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800052c:	187a      	adds	r2, r7, r1
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_TIM3_Init+0xbc>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fcd2 	bl	8001edc <HAL_TIM_Encoder_Init>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800053c:	f000 f94a 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	003b      	movs	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000546:	003b      	movs	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800054c:	003a      	movs	r2, r7
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_TIM3_Init+0xbc>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f002 fb70 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800055c:	f000 f93a 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b00d      	add	sp, #52	@ 0x34
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	20000074 	.word	0x20000074
 800056c:	40000400 	.word	0x40000400
 8000570:	0000ffff 	.word	0x0000ffff

08000574 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_TIM14_Init+0x40>)
 800057a:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <MX_TIM14_Init+0x44>)
 800057c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400-1;
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <MX_TIM14_Init+0x40>)
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <MX_TIM14_Init+0x48>)
 8000582:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000584:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <MX_TIM14_Init+0x40>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <MX_TIM14_Init+0x40>)
 800058c:	2263      	movs	r2, #99	@ 0x63
 800058e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <MX_TIM14_Init+0x40>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <MX_TIM14_Init+0x40>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <MX_TIM14_Init+0x40>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fac6 	bl	8001b30 <HAL_TIM_Base_Init>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80005a8:	f000 f914 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	200000c0 	.word	0x200000c0
 80005b8:	40002000 	.word	0x40002000
 80005bc:	000018ff 	.word	0x000018ff

080005c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c6:	2334      	movs	r3, #52	@ 0x34
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	231c      	movs	r3, #28
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fc47 	bl	8002e64 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fc40 	bl	8002e64 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005e4:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80005e6:	4a38      	ldr	r2, [pc, #224]	@ (80006c8 <MX_TIM16_Init+0x108>)
 80005e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 80005ea:	4b36      	ldr	r3, [pc, #216]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 800-1;
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80005f8:	4a34      	ldr	r2, [pc, #208]	@ (80006cc <MX_TIM16_Init+0x10c>)
 80005fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_TIM16_Init+0x104>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <MX_TIM16_Init+0x104>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800060e:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <MX_TIM16_Init+0x104>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fa8d 	bl	8001b30 <HAL_TIM_Base_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800061a:	f000 f8db 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_TIM16_Init+0x104>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fb2b 	bl	8001c7c <HAL_TIM_PWM_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8d3 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062e:	2134      	movs	r1, #52	@ 0x34
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2260      	movs	r2, #96	@ 0x60
 8000634:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	1879      	adds	r1, r7, r1
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_TIM16_Init+0x104>)
 800065e:	2200      	movs	r2, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fe8f 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800066a:	f000 f8b3 	bl	80007d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066e:	003b      	movs	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068c:	003b      	movs	r3, r7
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	0192      	lsls	r2, r2, #6
 8000692:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006a0:	003a      	movs	r2, r7
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fb28 	bl	8002cfc <HAL_TIMEx_ConfigBreakDeadTime>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 80006b0:	f000 f890 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <MX_TIM16_Init+0x104>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f980 	bl	80009bc <HAL_TIM_MspPostInit>

}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b014      	add	sp, #80	@ 0x50
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000010c 	.word	0x2000010c
 80006c8:	40014400 	.word	0x40014400
 80006cc:	0000031f 	.word	0x0000031f

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f002 fbbf 	bl	8002e64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_GPIO_Init+0x9c>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ea:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_GPIO_Init+0x9c>)
 80006ec:	2104      	movs	r1, #4
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_GPIO_Init+0x9c>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f6:	2204      	movs	r2, #4
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_GPIO_Init+0x9c>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_GPIO_Init+0x9c>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	635a      	str	r2, [r3, #52]	@ 0x34
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_GPIO_Init+0x9c>)
 800070c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_GPIO_Init+0x9c>)
 8000718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_GPIO_Init+0x9c>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_GPIO_Init+0x9c>)
 8000724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800072e:	23a0      	movs	r3, #160	@ 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fcea 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800073c:	0021      	movs	r1, r4
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2210      	movs	r2, #16
 8000742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000756:	187a      	adds	r2, r7, r1
 8000758:	23a0      	movs	r3, #160	@ 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fb72 	bl	8000e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b009      	add	sp, #36	@ 0x24
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    if (htim == &htim14){
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800077c:	429a      	cmp	r2, r3
 800077e:	d11d      	bne.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x4c>
  	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000780:	23a0      	movs	r3, #160	@ 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2110      	movs	r1, #16
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fcdf 	bl	800114a <HAL_GPIO_TogglePin>
  	  int32_t raw_diff = TIM3->CNT - cnt;
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800078e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000790:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000792:	2100      	movs	r1, #0
 8000794:	5e52      	ldrsh	r2, [r2, r1]
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  	  cnt = TIM3->CNT;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800079c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007a2:	801a      	strh	r2, [r3, #0]

  	  if(raw_diff<0){
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da05      	bge.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x46>
  		  raw_diff += 65536;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	4694      	mov	ip, r2
 80007b2:	4463      	add	r3, ip
 80007b4:	60fb      	str	r3, [r7, #12]
  	  }
  	  diff_cnt = raw_diff;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
    }
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b004      	add	sp, #16
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000c0 	.word	0x200000c0
 80007c8:	40000400 	.word	0x40000400
 80007cc:	20000158 	.word	0x20000158
 80007d0:	2000015c 	.word	0x2000015c

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x44>)
 80007e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <HAL_MspInit+0x44>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <HAL_MspInit+0x44>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_MspInit+0x44>)
 8000800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_MspInit+0x44>)
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	0549      	lsls	r1, r1, #21
 8000808:	430a      	orrs	r2, r1
 800080a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_MspInit+0x44>)
 800080e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	055b      	lsls	r3, r3, #21
 8000814:	4013      	ands	r3, r2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_TIM_PWM_MspInit+0x38>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10d      	bne.n	8000856 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 800083c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	0109      	lsls	r1, r1, #4
 8000844:	430a      	orrs	r2, r1
 8000846:	641a      	str	r2, [r3, #64]	@ 0x40
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 800084a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	@ 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 faf2 	bl	8002e64 <memset>
  if(htim_encoder->Instance==TIM3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d14f      	bne.n	800092a <HAL_TIM_Encoder_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 800088c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088e:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000890:	2102      	movs	r1, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800089a:	2202      	movs	r2, #2
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008c0:	2104      	movs	r1, #4
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ca:	2204      	movs	r2, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	193a      	adds	r2, r7, r4
 80008f2:	23a0      	movs	r3, #160	@ 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 faa5 	bl	8000e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2240      	movs	r2, #64	@ 0x40
 8000904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2202      	movs	r2, #2
 800090a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2201      	movs	r2, #1
 800091c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	187b      	adds	r3, r7, r1
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fa8f 	bl	8000e48 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b00b      	add	sp, #44	@ 0x2c
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40000400 	.word	0x40000400
 8000938:	40021000 	.word	0x40021000
 800093c:	50000800 	.word	0x50000800

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <HAL_TIM_Base_MspInit+0x70>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d116      	bne.n	8000980 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0209      	lsls	r1, r1, #8
 800095c:	430a      	orrs	r2, r1
 800095e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 8000962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000964:	2380      	movs	r3, #128	@ 0x80
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2013      	movs	r0, #19
 8000974:	f000 fa36 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000978:	2013      	movs	r0, #19
 800097a:	f000 fa48 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800097e:	e012      	b.n	80009a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <HAL_TIM_Base_MspInit+0x78>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10d      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 800098c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	641a      	str	r2, [r3, #64]	@ 0x40
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_TIM_Base_MspInit+0x74>)
 800099a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40002000 	.word	0x40002000
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40014400 	.word	0x40014400

080009bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	@ 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2414      	movs	r4, #20
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 fa48 	bl	8002e64 <memset>
  if(htim->Instance==TIM1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <HAL_TIM_MspPostInit+0xc0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d122      	bne.n	8000a24 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e2:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 80009e4:	2102      	movs	r1, #2
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ee:	2202      	movs	r2, #2
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009f6:	0021      	movs	r1, r4
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2240      	movs	r2, #64	@ 0x40
 80009fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2202      	movs	r2, #2
 8000a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a1a      	ldr	r2, [pc, #104]	@ (8000a84 <HAL_TIM_MspPostInit+0xc8>)
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	f000 fa13 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000a22:	e027      	b.n	8000a74 <HAL_TIM_MspPostInit+0xb8>
  else if(htim->Instance==TIM16)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_TIM_MspPostInit+0xcc>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d122      	bne.n	8000a74 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <HAL_TIM_MspPostInit+0xc4>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a46:	2114      	movs	r1, #20
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2240      	movs	r2, #64	@ 0x40
 8000a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2205      	movs	r2, #5
 8000a64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	23a0      	movs	r3, #160	@ 0xa0
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f9ea 	bl	8000e48 <HAL_GPIO_Init>
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00b      	add	sp, #44	@ 0x2c
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000
 8000a84:	50000400 	.word	0x50000400
 8000a88:	40014400 	.word	0x40014400

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f8aa 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <TIM14_IRQHandler+0x14>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fb54 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	200000c0 	.word	0x200000c0

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff fff6 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b12:	f002 f9af 	bl	8002e74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b16:	f7ff fb7f 	bl	8000218 <main>

08000b1a <LoopForever>:

LoopForever:
  b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	08002f70 	.word	0x08002f70
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	20000168 	.word	0x20000168

08000b34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_Init+0x3c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_Init+0x3c>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	0049      	lsls	r1, r1, #1
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b52:	2003      	movs	r0, #3
 8000b54:	f000 f810 	bl	8000b78 <HAL_InitTick>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e001      	b.n	8000b68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe3c 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <HAL_InitTick+0x88>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d02b      	beq.n	8000be8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_InitTick+0x8c>)
 8000b92:	681c      	ldr	r4, [r3, #0]
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <HAL_InitTick+0x88>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	0019      	movs	r1, r3
 8000b9a:	23fa      	movs	r3, #250	@ 0xfa
 8000b9c:	0098      	lsls	r0, r3, #2
 8000b9e:	f7ff faaf 	bl	8000100 <__udivsi3>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f7ff faaa 	bl	8000100 <__udivsi3>
 8000bac:	0003      	movs	r3, r0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f93d 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d112      	bne.n	8000bde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d80a      	bhi.n	8000bd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f90c 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_InitTick+0x90>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e00d      	b.n	8000bf0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e008      	b.n	8000bf0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e003      	b.n	8000bf0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b005      	add	sp, #20
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	001a      	movs	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	18d2      	adds	r2, r2, r3
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000164 	.word	0x20000164

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	@ (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000164 	.word	0x20000164

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff fff0 	bl	8000c30 <HAL_GetTick>
 8000c50:	0003      	movs	r3, r0
 8000c52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	001a      	movs	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	f7ff ffe0 	bl	8000c30 <HAL_GetTick>
 8000c70:	0002      	movs	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	0002      	movs	r2, r0
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c9e:	d809      	bhi.n	8000cb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	401a      	ands	r2, r3
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_EnableIRQ+0x30>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	4091      	lsls	r1, r2
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd4:	d828      	bhi.n	8000d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <__NVIC_SetPriority+0xd4>)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	33c0      	adds	r3, #192	@ 0xc0
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	589b      	ldr	r3, [r3, r2]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	@ 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	@ 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	481f      	ldr	r0, [pc, #124]	@ (8000d94 <__NVIC_SetPriority+0xd4>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	33c0      	adds	r3, #192	@ 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d26:	e031      	b.n	8000d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	400b      	ands	r3, r1
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3306      	adds	r3, #6
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3304      	adds	r3, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	@ 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	@ 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001c      	movs	r4, r3
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4023      	ands	r3, r4
 8000d7c:	3b08      	subs	r3, #8
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	430a      	orrs	r2, r1
 8000d82:	3306      	adds	r3, #6
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	18c3      	adds	r3, r0, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b003      	add	sp, #12
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	045b      	lsls	r3, r3, #17
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d301      	bcc.n	8000db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db0:	2301      	movs	r3, #1
 8000db2:	e010      	b.n	8000dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <SysTick_Config+0x44>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	3a01      	subs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff7c 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x44>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	210f      	movs	r1, #15
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	1c02      	adds	r2, r0, #0
 8000df4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	0002      	movs	r2, r0
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff33 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ffaf 	bl	8000d9c <SysTick_Config>
 8000e3e:	0003      	movs	r3, r0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e147      	b.n	80010e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <HAL_GPIO_Init+0x28>
 8000e6e:	e138      	b.n	80010e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d005      	beq.n	8000e88 <HAL_GPIO_Init+0x40>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2203      	movs	r2, #3
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d130      	bne.n	8000eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2203      	movs	r2, #3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d017      	beq.n	8000f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d123      	bne.n	8000f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	58d3      	ldr	r3, [r2, r3]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2207      	movs	r2, #7
 8000f44:	4013      	ands	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	400b      	ands	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	401a      	ands	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	23c0      	movs	r3, #192	@ 0xc0
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d100      	bne.n	8000fbc <HAL_GPIO_Init+0x174>
 8000fba:	e092      	b.n	80010e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fbc:	4a50      	ldr	r2, [pc, #320]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3318      	adds	r3, #24
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	589b      	ldr	r3, [r3, r2]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	23a0      	movs	r3, #160	@ 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x1ca>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a45      	ldr	r2, [pc, #276]	@ (8001104 <HAL_GPIO_Init+0x2bc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1c6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a44      	ldr	r2, [pc, #272]	@ (8001108 <HAL_GPIO_Init+0x2c0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1c2>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a43      	ldr	r2, [pc, #268]	@ (800110c <HAL_GPIO_Init+0x2c4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1be>
 8001002:	2303      	movs	r3, #3
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x1cc>
 8001006:	2305      	movs	r3, #5
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x1cc>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x1cc>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x1cc>
 8001012:	2300      	movs	r3, #0
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	2103      	movs	r1, #3
 8001018:	400a      	ands	r2, r1
 800101a:	00d2      	lsls	r2, r2, #3
 800101c:	4093      	lsls	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001024:	4936      	ldr	r1, [pc, #216]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3318      	adds	r3, #24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001032:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	035b      	lsls	r3, r3, #13
 800104a:	4013      	ands	r3, r2
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	4013      	ands	r3, r2
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 8001088:	2384      	movs	r3, #132	@ 0x84
 800108a:	58d3      	ldr	r3, [r2, r3]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ac:	4914      	ldr	r1, [pc, #80]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 80010ae:	2284      	movs	r2, #132	@ 0x84
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010b4:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	58d3      	ldr	r3, [r2, r3]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010da:	4909      	ldr	r1, [pc, #36]	@ (8001100 <HAL_GPIO_Init+0x2b8>)
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	1e13      	subs	r3, r2, #0
 80010f2:	d000      	beq.n	80010f6 <HAL_GPIO_Init+0x2ae>
 80010f4:	e6b0      	b.n	8000e58 <HAL_GPIO_Init+0x10>
  }
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021800 	.word	0x40021800
 8001104:	50000400 	.word	0x50000400
 8001108:	50000800 	.word	0x50000800
 800110c:	50000c00 	.word	0x50000c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	0008      	movs	r0, r1
 800111a:	0011      	movs	r1, r2
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	1c02      	adds	r2, r0, #0
 8001120:	801a      	strh	r2, [r3, #0]
 8001122:	1c7b      	adds	r3, r7, #1
 8001124:	1c0a      	adds	r2, r1, #0
 8001126:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	1c7b      	adds	r3, r7, #1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	000a      	movs	r2, r1
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	041a      	lsls	r2, r3, #16
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	1cb9      	adds	r1, r7, #2
 800116e:	8809      	ldrh	r1, [r1, #0]
 8001170:	400b      	ands	r3, r1
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800118e:	4013      	ands	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d11f      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	0013      	movs	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4912      	ldr	r1, [pc, #72]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7fe ffa4 	bl	8000100 <__udivsi3>
 80011b8:	0003      	movs	r3, r0
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011be:	e008      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e001      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e009      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	401a      	ands	r2, r3
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d0ed      	beq.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	40007000 	.word	0x40007000
 80011f4:	fffff9ff 	.word	0xfffff9ff
 80011f8:	20000000 	.word	0x20000000
 80011fc:	000f4240 	.word	0x000f4240

08001200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e2f3      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	4013      	ands	r3, r2
 800121a:	d100      	bne.n	800121e <HAL_RCC_OscConfig+0x1e>
 800121c:	e07c      	b.n	8001318 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121e:	4bc3      	ldr	r3, [pc, #780]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2238      	movs	r2, #56	@ 0x38
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001228:	4bc0      	ldr	r3, [pc, #768]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b10      	cmp	r3, #16
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x3e>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d002      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4bb9      	ldr	r3, [pc, #740]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d062      	beq.n	8001316 <HAL_RCC_OscConfig+0x116>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d15e      	bne.n	8001316 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e2ce      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	429a      	cmp	r2, r3
 8001266:	d107      	bne.n	8001278 <HAL_RCC_OscConfig+0x78>
 8001268:	4bb0      	ldr	r3, [pc, #704]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4baf      	ldr	r3, [pc, #700]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	0249      	lsls	r1, r1, #9
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e020      	b.n	80012ba <HAL_RCC_OscConfig+0xba>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	23a0      	movs	r3, #160	@ 0xa0
 800127e:	02db      	lsls	r3, r3, #11
 8001280:	429a      	cmp	r2, r3
 8001282:	d10e      	bne.n	80012a2 <HAL_RCC_OscConfig+0xa2>
 8001284:	4ba9      	ldr	r3, [pc, #676]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4ba8      	ldr	r3, [pc, #672]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	02c9      	lsls	r1, r1, #11
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4ba6      	ldr	r3, [pc, #664]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4ba5      	ldr	r3, [pc, #660]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001298:	2180      	movs	r1, #128	@ 0x80
 800129a:	0249      	lsls	r1, r1, #9
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0xba>
 80012a2:	4ba2      	ldr	r3, [pc, #648]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4ba1      	ldr	r3, [pc, #644]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80012a8:	49a1      	ldr	r1, [pc, #644]	@ (8001530 <HAL_RCC_OscConfig+0x330>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	4b9f      	ldr	r3, [pc, #636]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b9e      	ldr	r3, [pc, #632]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	499f      	ldr	r1, [pc, #636]	@ (8001534 <HAL_RCC_OscConfig+0x334>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d014      	beq.n	80012ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fcb5 	bl	8000c30 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcb0 	bl	8000c30 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e28d      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	4b93      	ldr	r3, [pc, #588]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xcc>
 80012ea:	e015      	b.n	8001318 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fca0 	bl	8000c30 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f6:	f7ff fc9b 	bl	8000c30 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	@ 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e278      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001308:	4b88      	ldr	r3, [pc, #544]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0xf6>
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_RCC_OscConfig+0x124>
 8001322:	e099      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4b81      	ldr	r3, [pc, #516]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2238      	movs	r2, #56	@ 0x38
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4b7f      	ldr	r3, [pc, #508]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d102      	bne.n	8001344 <HAL_RCC_OscConfig+0x144>
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d002      	beq.n	800134a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d135      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134a:	4b78      	ldr	r3, [pc, #480]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4013      	ands	r3, r2
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x162>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e24b      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b72      	ldr	r3, [pc, #456]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a74      	ldr	r2, [pc, #464]	@ (8001538 <HAL_RCC_OscConfig+0x338>)
 8001368:	4013      	ands	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	4b6e      	ldr	r3, [pc, #440]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d112      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800137e:	4b6b      	ldr	r3, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x33c>)
 8001384:	4013      	ands	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	4b67      	ldr	r3, [pc, #412]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001392:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0adb      	lsrs	r3, r3, #11
 8001398:	2207      	movs	r2, #7
 800139a:	4013      	ands	r3, r2
 800139c:	4a68      	ldr	r2, [pc, #416]	@ (8001540 <HAL_RCC_OscConfig+0x340>)
 800139e:	40da      	lsrs	r2, r3
 80013a0:	4b68      	ldr	r3, [pc, #416]	@ (8001544 <HAL_RCC_OscConfig+0x344>)
 80013a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013a4:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <HAL_RCC_OscConfig+0x348>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fbe5 	bl	8000b78 <HAL_InitTick>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d051      	beq.n	8001456 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e221      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d030      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013be:	4b5b      	ldr	r3, [pc, #364]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <HAL_RCC_OscConfig+0x33c>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	4b57      	ldr	r3, [pc, #348]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013d2:	4b56      	ldr	r3, [pc, #344]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b55      	ldr	r3, [pc, #340]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	0049      	lsls	r1, r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc26 	bl	8000c30 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc21 	bl	8000c30 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1fe      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fc:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4013      	ands	r3, r2
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b48      	ldr	r3, [pc, #288]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	@ (8001538 <HAL_RCC_OscConfig+0x338>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	021a      	lsls	r2, r3, #8
 8001418:	4b44      	ldr	r3, [pc, #272]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001420:	4b42      	ldr	r3, [pc, #264]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001426:	4949      	ldr	r1, [pc, #292]	@ (800154c <HAL_RCC_OscConfig+0x34c>)
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc00 	bl	8000c30 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fbfb 	bl	8000c30 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1d8      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	4b38      	ldr	r3, [pc, #224]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4013      	ands	r3, r2
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x236>
 8001454:	e000      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001456:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2208      	movs	r2, #8
 800145e:	4013      	ands	r3, r2
 8001460:	d047      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001462:	4b32      	ldr	r3, [pc, #200]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2238      	movs	r2, #56	@ 0x38
 8001468:	4013      	ands	r3, r2
 800146a:	2b18      	cmp	r3, #24
 800146c:	d10a      	bne.n	8001484 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800146e:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d03c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d138      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e1ba      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d019      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 800148e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001490:	4b26      	ldr	r3, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbca 	bl	8000c30 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fbc5 	bl	8000c30 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1a2      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f1      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2a2>
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80014c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbb0 	bl	8000c30 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbab 	bl	8000c30 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e188      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e8:	4b10      	ldr	r3, [pc, #64]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d1f1      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x2fe>
 80014fc:	e0c6      	b.n	800168c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	231f      	movs	r3, #31
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2238      	movs	r2, #56	@ 0x38
 800150c:	4013      	ands	r3, r2
 800150e:	2b20      	cmp	r3, #32
 8001510:	d11e      	bne.n	8001550 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_RCC_OscConfig+0x32c>)
 8001514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x31e>
 800151c:	e0b6      	b.n	800168c <HAL_RCC_OscConfig+0x48c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d000      	beq.n	8001528 <HAL_RCC_OscConfig+0x328>
 8001526:	e0b1      	b.n	800168c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e166      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
 800152c:	40021000 	.word	0x40021000
 8001530:	fffeffff 	.word	0xfffeffff
 8001534:	fffbffff 	.word	0xfffbffff
 8001538:	ffff80ff 	.word	0xffff80ff
 800153c:	ffffc7ff 	.word	0xffffc7ff
 8001540:	00f42400 	.word	0x00f42400
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
 800154c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001550:	4bac      	ldr	r3, [pc, #688]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4013      	ands	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x362>
 8001560:	2300      	movs	r3, #0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4ba7      	ldr	r3, [pc, #668]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800156a:	4ba6      	ldr	r3, [pc, #664]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	0549      	lsls	r1, r1, #21
 8001570:	430a      	orrs	r2, r1
 8001572:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001574:	4ba3      	ldr	r3, [pc, #652]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001582:	231f      	movs	r3, #31
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158a:	4b9f      	ldr	r3, [pc, #636]	@ (8001808 <HAL_RCC_OscConfig+0x608>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4013      	ands	r3, r2
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001596:	4b9c      	ldr	r3, [pc, #624]	@ (8001808 <HAL_RCC_OscConfig+0x608>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b9b      	ldr	r3, [pc, #620]	@ (8001808 <HAL_RCC_OscConfig+0x608>)
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0049      	lsls	r1, r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb44 	bl	8000c30 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb3f 	bl	8000c30 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e11c      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	4b91      	ldr	r3, [pc, #580]	@ (8001808 <HAL_RCC_OscConfig+0x608>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3e2>
 80015d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x41c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x404>
 80015ea:	4b86      	ldr	r3, [pc, #536]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015f0:	2104      	movs	r1, #4
 80015f2:	430a      	orrs	r2, r1
 80015f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015f6:	4b83      	ldr	r3, [pc, #524]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015fa:	4b82      	ldr	r3, [pc, #520]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x41c>
 8001604:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001606:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001608:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001610:	4b7c      	ldr	r3, [pc, #496]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001612:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001614:	4b7b      	ldr	r3, [pc, #492]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d014      	beq.n	800164e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb04 	bl	8000c30 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff faff 	bl	8000c30 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4a74      	ldr	r2, [pc, #464]	@ (800180c <HAL_RCC_OscConfig+0x60c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0db      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001642:	4b70      	ldr	r3, [pc, #448]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x42e>
 800164c:	e013      	b.n	8001676 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff faef 	bl	8000c30 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff faea 	bl	8000c30 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4a6a      	ldr	r2, [pc, #424]	@ (800180c <HAL_RCC_OscConfig+0x60c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0c6      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166c:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001684:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001686:	4962      	ldr	r1, [pc, #392]	@ (8001810 <HAL_RCC_OscConfig+0x610>)
 8001688:	400a      	ands	r2, r1
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x496>
 8001694:	e0b0      	b.n	80017f8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001696:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2238      	movs	r2, #56	@ 0x38
 800169c:	4013      	ands	r3, r2
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d100      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4a4>
 80016a2:	e078      	b.n	8001796 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d153      	bne.n	8001754 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ac:	4b55      	ldr	r3, [pc, #340]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80016b2:	4958      	ldr	r1, [pc, #352]	@ (8001814 <HAL_RCC_OscConfig+0x614>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff faba 	bl	8000c30 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fab5 	bl	8000c30 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e092      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	049b      	lsls	r3, r3, #18
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	4b48      	ldr	r3, [pc, #288]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001818 <HAL_RCC_OscConfig+0x618>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	431a      	orrs	r2, r3
 8001708:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800170a:	430a      	orrs	r2, r1
 800170c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001714:	2180      	movs	r1, #128	@ 0x80
 8001716:	0449      	lsls	r1, r1, #17
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800171c:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0549      	lsls	r1, r1, #21
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fa81 	bl	8000c30 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fa7c 	bl	8000c30 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e059      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x534>
 8001752:	e051      	b.n	80017f8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800175a:	492e      	ldr	r1, [pc, #184]	@ (8001814 <HAL_RCC_OscConfig+0x614>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa66 	bl	8000c30 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fa61 	bl	8000c30 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e03e      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	049b      	lsls	r3, r3, #18
 8001784:	4013      	ands	r3, r2
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 800178e:	4923      	ldr	r1, [pc, #140]	@ (800181c <HAL_RCC_OscConfig+0x61c>)
 8001790:	400a      	ands	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	e030      	b.n	80017f8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e02b      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_RCC_OscConfig+0x604>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2203      	movs	r2, #3
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d11e      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2270      	movs	r2, #112	@ 0x70
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d117      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	23fe      	movs	r3, #254	@ 0xfe
 80017c8:	01db      	lsls	r3, r3, #7
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d10e      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	23f8      	movs	r3, #248	@ 0xf8
 80017da:	039b      	lsls	r3, r3, #14
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	0f5b      	lsrs	r3, r3, #29
 80017ea:	075a      	lsls	r2, r3, #29
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b008      	add	sp, #32
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
 800180c:	00001388 	.word	0x00001388
 8001810:	efffffff 	.word	0xefffffff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	1fc1808c 	.word	0x1fc1808c
 800181c:	effefffc 	.word	0xeffefffc

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0e9      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b76      	ldr	r3, [pc, #472]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d91e      	bls.n	8001880 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b73      	ldr	r3, [pc, #460]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2207      	movs	r2, #7
 8001848:	4393      	bics	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001854:	f7ff f9ec 	bl	8000c30 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800185c:	e009      	b.n	8001872 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7ff f9e7 	bl	8000c30 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a6a      	ldr	r2, [pc, #424]	@ (8001a14 <HAL_RCC_ClockConfig+0x1f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0ca      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001872:	4b67      	ldr	r3, [pc, #412]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2207      	movs	r2, #7
 8001878:	4013      	ands	r3, r2
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d015      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d006      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001894:	4b60      	ldr	r3, [pc, #384]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b5f      	ldr	r3, [pc, #380]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	21e0      	movs	r1, #224	@ 0xe0
 800189c:	01c9      	lsls	r1, r1, #7
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a1c <HAL_RCC_ClockConfig+0x1fc>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	d057      	beq.n	8001970 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	d12b      	bne.n	800192c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e097      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	049b      	lsls	r3, r3, #18
 80018e8:	4013      	ands	r3, r2
 80018ea:	d11f      	bne.n	800192c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e08b      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4013      	ands	r3, r2
 8001902:	d113      	bne.n	800192c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e07f      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d106      	bne.n	800191e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001910:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d108      	bne.n	800192c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e074      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e06d      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2207      	movs	r2, #7
 8001932:	4393      	bics	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4b37      	ldr	r3, [pc, #220]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7ff f976 	bl	8000c30 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001948:	e009      	b.n	800195e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff f971 	bl	8000c30 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	4a2f      	ldr	r2, [pc, #188]	@ (8001a14 <HAL_RCC_ClockConfig+0x1f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e054      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2238      	movs	r2, #56	@ 0x38
 8001964:	401a      	ands	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	429a      	cmp	r2, r3
 800196e:	d1ec      	bne.n	800194a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2207      	movs	r2, #7
 8001976:	4013      	ands	r3, r2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d21e      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2207      	movs	r2, #7
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001990:	f7ff f94e 	bl	8000c30 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001998:	e009      	b.n	80019ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	f7ff f949 	bl	8000c30 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_RCC_ClockConfig+0x1f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e02c      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ae:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2207      	movs	r2, #7
 80019b4:	4013      	ands	r3, r2
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2204      	movs	r2, #4
 80019c2:	4013      	ands	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <HAL_RCC_ClockConfig+0x200>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019da:	f000 f829 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019de:	0001      	movs	r1, r0
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	220f      	movs	r2, #15
 80019e8:	401a      	ands	r2, r3
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_RCC_ClockConfig+0x204>)
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	58d3      	ldr	r3, [r2, r3]
 80019f0:	221f      	movs	r2, #31
 80019f2:	4013      	ands	r3, r2
 80019f4:	000a      	movs	r2, r1
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_ClockConfig+0x208>)
 80019fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_RCC_ClockConfig+0x20c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff f8b9 	bl	8000b78 <HAL_InitTick>
 8001a06:	0003      	movs	r3, r0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b004      	add	sp, #16
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40022000 	.word	0x40022000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffff0ff 	.word	0xfffff0ff
 8001a20:	ffff8fff 	.word	0xffff8fff
 8001a24:	08002ed4 	.word	0x08002ed4
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a36:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	@ 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d10f      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a40:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0adb      	lsrs	r3, r3, #11
 8001a46:	2207      	movs	r2, #7
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	4835      	ldr	r0, [pc, #212]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a56:	f7fe fb53 	bl	8000100 <__udivsi3>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e05d      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2238      	movs	r2, #56	@ 0x38
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e054      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	@ 0x38
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d138      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2203      	movs	r2, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a88:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4013      	ands	r3, r2
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	4823      	ldr	r0, [pc, #140]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001aa0:	f7fe fb2e 	bl	8000100 <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	227f      	movs	r2, #127	@ 0x7f
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	434b      	muls	r3, r1
 8001ab4:	617b      	str	r3, [r7, #20]
        break;
 8001ab6:	e00d      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	481c      	ldr	r0, [pc, #112]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001abc:	f7fe fb20 	bl	8000100 <__udivsi3>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	227f      	movs	r2, #127	@ 0x7f
 8001acc:	4013      	ands	r3, r2
 8001ace:	434b      	muls	r3, r1
 8001ad0:	617b      	str	r3, [r7, #20]
        break;
 8001ad2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0f5b      	lsrs	r3, r3, #29
 8001ada:	2207      	movs	r2, #7
 8001adc:	4013      	ands	r3, r2
 8001ade:	3301      	adds	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	f7fe fb0b 	bl	8000100 <__udivsi3>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2238      	movs	r2, #56	@ 0x38
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d103      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2238      	movs	r2, #56	@ 0x38
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b18      	cmp	r3, #24
 8001b0e:	d103      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b10:	23fa      	movs	r3, #250	@ 0xfa
 8001b12:	01db      	lsls	r3, r3, #7
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e001      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	00f42400 	.word	0x00f42400

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e04a      	b.n	8001bd8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223d      	movs	r2, #61	@ 0x3d
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	223c      	movs	r2, #60	@ 0x3c
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe fef1 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	223d      	movs	r2, #61	@ 0x3d
 8001b62:	2102      	movs	r1, #2
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	0019      	movs	r1, r3
 8001b70:	0010      	movs	r0, r2
 8001b72:	f000 fd27 	bl	80025c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2248      	movs	r2, #72	@ 0x48
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223e      	movs	r2, #62	@ 0x3e
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223f      	movs	r2, #63	@ 0x3f
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	5499      	strb	r1, [r3, r2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2240      	movs	r2, #64	@ 0x40
 8001b92:	2101      	movs	r1, #1
 8001b94:	5499      	strb	r1, [r3, r2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2241      	movs	r2, #65	@ 0x41
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2242      	movs	r2, #66	@ 0x42
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2243      	movs	r2, #67	@ 0x43
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2244      	movs	r2, #68	@ 0x44
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2245      	movs	r2, #69	@ 0x45
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2246      	movs	r2, #70	@ 0x46
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2247      	movs	r2, #71	@ 0x47
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	223d      	movs	r2, #61	@ 0x3d
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	223d      	movs	r2, #61	@ 0x3d
 8001bec:	5c9b      	ldrb	r3, [r3, r2]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e037      	b.n	8001c68 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	223d      	movs	r2, #61	@ 0x3d
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <HAL_TIM_Base_Start_IT+0x90>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x44>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a15      	ldr	r2, [pc, #84]	@ (8001c74 <HAL_TIM_Base_Start_IT+0x94>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d116      	bne.n	8001c52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4a13      	ldr	r2, [pc, #76]	@ (8001c78 <HAL_TIM_Base_Start_IT+0x98>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d016      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x84>
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d011      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c50:	e008      	b.n	8001c64 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e000      	b.n	8001c66 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c64:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b004      	add	sp, #16
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40000400 	.word	0x40000400
 8001c78:	00010007 	.word	0x00010007

08001c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e04a      	b.n	8001d24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	223d      	movs	r2, #61	@ 0x3d
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223c      	movs	r2, #60	@ 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7fe fdbf 	bl	8000828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223d      	movs	r2, #61	@ 0x3d
 8001cae:	2102      	movs	r1, #2
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f000 fc81 	bl	80025c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2248      	movs	r2, #72	@ 0x48
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223e      	movs	r2, #62	@ 0x3e
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223f      	movs	r2, #63	@ 0x3f
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2240      	movs	r2, #64	@ 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	@ 0x41
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2242      	movs	r2, #66	@ 0x42
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2243      	movs	r2, #67	@ 0x43
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2244      	movs	r2, #68	@ 0x44
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2245      	movs	r2, #69	@ 0x45
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2246      	movs	r2, #70	@ 0x46
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2247      	movs	r2, #71	@ 0x47
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	223d      	movs	r2, #61	@ 0x3d
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <HAL_TIM_PWM_Start+0x22>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	223e      	movs	r2, #62	@ 0x3e
 8001d40:	5c9b      	ldrb	r3, [r3, r2]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	4193      	sbcs	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	e037      	b.n	8001dbe <HAL_TIM_PWM_Start+0x92>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d108      	bne.n	8001d66 <HAL_TIM_PWM_Start+0x3a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	223f      	movs	r2, #63	@ 0x3f
 8001d58:	5c9b      	ldrb	r3, [r3, r2]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	4193      	sbcs	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e02b      	b.n	8001dbe <HAL_TIM_PWM_Start+0x92>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d108      	bne.n	8001d7e <HAL_TIM_PWM_Start+0x52>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	4193      	sbcs	r3, r2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	e01f      	b.n	8001dbe <HAL_TIM_PWM_Start+0x92>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d108      	bne.n	8001d96 <HAL_TIM_PWM_Start+0x6a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2241      	movs	r2, #65	@ 0x41
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	4193      	sbcs	r3, r2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	e013      	b.n	8001dbe <HAL_TIM_PWM_Start+0x92>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d108      	bne.n	8001dae <HAL_TIM_PWM_Start+0x82>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2242      	movs	r2, #66	@ 0x42
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	4193      	sbcs	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	e007      	b.n	8001dbe <HAL_TIM_PWM_Start+0x92>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2243      	movs	r2, #67	@ 0x43
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	1e5a      	subs	r2, r3, #1
 8001dba:	4193      	sbcs	r3, r2
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07b      	b.n	8001ebe <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <HAL_TIM_PWM_Start+0xaa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	223e      	movs	r2, #62	@ 0x3e
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	5499      	strb	r1, [r3, r2]
 8001dd4:	e023      	b.n	8001e1e <HAL_TIM_PWM_Start+0xf2>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d104      	bne.n	8001de6 <HAL_TIM_PWM_Start+0xba>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	223f      	movs	r2, #63	@ 0x3f
 8001de0:	2102      	movs	r1, #2
 8001de2:	5499      	strb	r1, [r3, r2]
 8001de4:	e01b      	b.n	8001e1e <HAL_TIM_PWM_Start+0xf2>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d104      	bne.n	8001df6 <HAL_TIM_PWM_Start+0xca>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	2102      	movs	r1, #2
 8001df2:	5499      	strb	r1, [r3, r2]
 8001df4:	e013      	b.n	8001e1e <HAL_TIM_PWM_Start+0xf2>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d104      	bne.n	8001e06 <HAL_TIM_PWM_Start+0xda>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2241      	movs	r2, #65	@ 0x41
 8001e00:	2102      	movs	r1, #2
 8001e02:	5499      	strb	r1, [r3, r2]
 8001e04:	e00b      	b.n	8001e1e <HAL_TIM_PWM_Start+0xf2>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d104      	bne.n	8001e16 <HAL_TIM_PWM_Start+0xea>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2242      	movs	r2, #66	@ 0x42
 8001e10:	2102      	movs	r1, #2
 8001e12:	5499      	strb	r1, [r3, r2]
 8001e14:	e003      	b.n	8001e1e <HAL_TIM_PWM_Start+0xf2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2243      	movs	r2, #67	@ 0x43
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fee2 	bl	8002bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a25      	ldr	r2, [pc, #148]	@ (8001ec8 <HAL_TIM_PWM_Start+0x19c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x11e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	@ (8001ecc <HAL_TIM_PWM_Start+0x1a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x11e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_TIM_PWM_Start+0x1a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PWM_Start+0x122>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_PWM_Start+0x124>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	0209      	lsls	r1, r1, #8
 8001e62:	430a      	orrs	r2, r1
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <HAL_TIM_PWM_Start+0x19c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_TIM_PWM_Start+0x14e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1a8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d116      	bne.n	8001ea8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_TIM_PWM_Start+0x1ac>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d016      	beq.n	8001eba <HAL_TIM_PWM_Start+0x18e>
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	025b      	lsls	r3, r3, #9
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d011      	beq.n	8001eba <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b004      	add	sp, #16
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	00010007 	.word	0x00010007

08001edc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e090      	b.n	8002012 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	223d      	movs	r2, #61	@ 0x3d
 8001ef4:	5c9b      	ldrb	r3, [r3, r2]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223c      	movs	r2, #60	@ 0x3c
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7fe fcae 	bl	8000868 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	223d      	movs	r2, #61	@ 0x3d
 8001f10:	2102      	movs	r1, #2
 8001f12:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	493f      	ldr	r1, [pc, #252]	@ (800201c <HAL_TIM_Encoder_Init+0x140>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	0010      	movs	r0, r2
 8001f30:	f000 fb48 	bl	80025c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4a31      	ldr	r2, [pc, #196]	@ (8002020 <HAL_TIM_Encoder_Init+0x144>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4a2c      	ldr	r2, [pc, #176]	@ (8002024 <HAL_TIM_Encoder_Init+0x148>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <HAL_TIM_Encoder_Init+0x14c>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	011a      	lsls	r2, r3, #4
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	031b      	lsls	r3, r3, #12
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2222      	movs	r2, #34	@ 0x22
 8001faa:	4393      	bics	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2288      	movs	r2, #136	@ 0x88
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2248      	movs	r2, #72	@ 0x48
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223e      	movs	r2, #62	@ 0x3e
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223f      	movs	r2, #63	@ 0x3f
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2244      	movs	r2, #68	@ 0x44
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2245      	movs	r2, #69	@ 0x45
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	223d      	movs	r2, #61	@ 0x3d
 800200c:	2101      	movs	r1, #1
 800200e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b006      	add	sp, #24
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	fffebff8 	.word	0xfffebff8
 8002020:	fffffcfc 	.word	0xfffffcfc
 8002024:	fffff3f3 	.word	0xfffff3f3
 8002028:	ffff0f0f 	.word	0xffff0f0f

0800202c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002036:	200f      	movs	r0, #15
 8002038:	183b      	adds	r3, r7, r0
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	213e      	movs	r1, #62	@ 0x3e
 800203e:	5c52      	ldrb	r2, [r2, r1]
 8002040:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002042:	230e      	movs	r3, #14
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	213f      	movs	r1, #63	@ 0x3f
 800204a:	5c52      	ldrb	r2, [r2, r1]
 800204c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800204e:	240d      	movs	r4, #13
 8002050:	193b      	adds	r3, r7, r4
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	2144      	movs	r1, #68	@ 0x44
 8002056:	5c52      	ldrb	r2, [r2, r1]
 8002058:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800205a:	230c      	movs	r3, #12
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	2145      	movs	r1, #69	@ 0x45
 8002062:	5c52      	ldrb	r2, [r2, r1]
 8002064:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d112      	bne.n	8002092 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800206c:	183b      	adds	r3, r7, r0
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d103      	bne.n	800207c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002074:	193b      	adds	r3, r7, r4
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e075      	b.n	800216c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	223e      	movs	r2, #62	@ 0x3e
 8002084:	2102      	movs	r1, #2
 8002086:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2244      	movs	r2, #68	@ 0x44
 800208c:	2102      	movs	r1, #2
 800208e:	5499      	strb	r1, [r3, r2]
 8002090:	e03d      	b.n	800210e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d114      	bne.n	80020c2 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002098:	230e      	movs	r3, #14
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020a2:	230c      	movs	r3, #12
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e05d      	b.n	800216c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	223f      	movs	r2, #63	@ 0x3f
 80020b4:	2102      	movs	r1, #2
 80020b6:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2245      	movs	r2, #69	@ 0x45
 80020bc:	2102      	movs	r1, #2
 80020be:	5499      	strb	r1, [r3, r2]
 80020c0:	e025      	b.n	800210e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10e      	bne.n	80020ea <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80020cc:	230e      	movs	r3, #14
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d109      	bne.n	80020ea <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020d6:	230d      	movs	r3, #13
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d104      	bne.n	80020ea <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020e0:	230c      	movs	r3, #12
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e03e      	b.n	800216c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223e      	movs	r2, #62	@ 0x3e
 80020f2:	2102      	movs	r1, #2
 80020f4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	223f      	movs	r2, #63	@ 0x3f
 80020fa:	2102      	movs	r1, #2
 80020fc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2244      	movs	r2, #68	@ 0x44
 8002102:	2102      	movs	r1, #2
 8002104:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2245      	movs	r2, #69	@ 0x45
 800210a:	2102      	movs	r1, #2
 800210c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_TIM_Encoder_Start+0xf0>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d008      	beq.n	800212c <HAL_TIM_Encoder_Start+0x100>
 800211a:	e00f      	b.n	800213c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	2100      	movs	r1, #0
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fd63 	bl	8002bf0 <TIM_CCxChannelCmd>
      break;
 800212a:	e016      	b.n	800215a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	2104      	movs	r1, #4
 8002134:	0018      	movs	r0, r3
 8002136:	f000 fd5b 	bl	8002bf0 <TIM_CCxChannelCmd>
      break;
 800213a:	e00e      	b.n	800215a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	2100      	movs	r1, #0
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fd53 	bl	8002bf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	2104      	movs	r1, #4
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fd4c 	bl	8002bf0 <TIM_CCxChannelCmd>
      break;
 8002158:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b005      	add	sp, #20
 8002172:	bd90      	pop	{r4, r7, pc}

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d021      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d01d      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4252      	negs	r2, r2
 80021a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	d004      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f9ea 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f9dd 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f9e9 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	d022      	beq.n	8002226 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2204      	movs	r2, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	d01e      	beq.n	8002226 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2205      	movs	r2, #5
 80021ee:	4252      	negs	r2, r2
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f9c3 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800220e:	e007      	b.n	8002220 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 f9b6 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f9c2 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2208      	movs	r2, #8
 800222a:	4013      	ands	r3, r2
 800222c:	d021      	beq.n	8002272 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2208      	movs	r2, #8
 8002232:	4013      	ands	r3, r2
 8002234:	d01d      	beq.n	8002272 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2209      	movs	r2, #9
 800223c:	4252      	negs	r2, r2
 800223e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f99d 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800225a:	e007      	b.n	800226c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f990 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f99c 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2210      	movs	r2, #16
 8002276:	4013      	ands	r3, r2
 8002278:	d022      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2210      	movs	r2, #16
 800227e:	4013      	ands	r3, r2
 8002280:	d01e      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2211      	movs	r2, #17
 8002288:	4252      	negs	r2, r2
 800228a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2208      	movs	r2, #8
 8002290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	23c0      	movs	r3, #192	@ 0xc0
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d004      	beq.n	80022aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f976 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e007      	b.n	80022ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f969 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f975 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d00c      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d008      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4252      	negs	r2, r2
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f7fe fa47 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	4013      	ands	r3, r2
 80022e8:	d104      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	019b      	lsls	r3, r3, #6
 80022f0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022f2:	d00b      	beq.n	800230c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2280      	movs	r2, #128	@ 0x80
 80022f8:	4013      	ands	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_TIM_IRQHandler+0x208>)
 8002302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fd9c 	bl	8002e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4013      	ands	r3, r2
 8002314:	d00b      	beq.n	800232e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	4013      	ands	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_TIM_IRQHandler+0x20c>)
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fd93 	bl	8002e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2240      	movs	r2, #64	@ 0x40
 8002332:	4013      	ands	r3, r2
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2240      	movs	r2, #64	@ 0x40
 800233a:	4013      	ands	r3, r2
 800233c:	d008      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2241      	movs	r2, #65	@ 0x41
 8002344:	4252      	negs	r2, r2
 8002346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f932 	bl	80025b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2220      	movs	r2, #32
 8002354:	4013      	ands	r3, r2
 8002356:	d00c      	beq.n	8002372 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	4013      	ands	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2221      	movs	r2, #33	@ 0x21
 8002366:	4252      	negs	r2, r2
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 fd61 	bl	8002e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b004      	add	sp, #16
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	ffffdf7f 	.word	0xffffdf7f
 8002380:	fffffeff 	.word	0xfffffeff

08002384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2317      	movs	r3, #23
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	223c      	movs	r2, #60	@ 0x3c
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0e5      	b.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	223c      	movs	r2, #60	@ 0x3c
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b14      	cmp	r3, #20
 80023b2:	d900      	bls.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80023b4:	e0d1      	b.n	800255a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	4b70      	ldr	r3, [pc, #448]	@ (800257c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f974 	bl	80026b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2108      	movs	r1, #8
 80023dc:	430a      	orrs	r2, r1
 80023de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2104      	movs	r1, #4
 80023ec:	438a      	bics	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6999      	ldr	r1, [r3, #24]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	619a      	str	r2, [r3, #24]
      break;
 8002402:	e0af      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	0011      	movs	r1, r2
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f9d3 	bl	80027b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0109      	lsls	r1, r1, #4
 8002420:	430a      	orrs	r2, r1
 8002422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4954      	ldr	r1, [pc, #336]	@ (8002580 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002430:	400a      	ands	r2, r1
 8002432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6999      	ldr	r1, [r3, #24]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	619a      	str	r2, [r3, #24]
      break;
 8002448:	e08c      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fa2e 	bl	80028b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2108      	movs	r1, #8
 8002464:	430a      	orrs	r2, r1
 8002466:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2104      	movs	r1, #4
 8002474:	438a      	bics	r2, r1
 8002476:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69d9      	ldr	r1, [r3, #28]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	61da      	str	r2, [r3, #28]
      break;
 800248a:	e06b      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fa8f 	bl	80029b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0109      	lsls	r1, r1, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4932      	ldr	r1, [pc, #200]	@ (8002580 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69d9      	ldr	r1, [r3, #28]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	021a      	lsls	r2, r3, #8
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	61da      	str	r2, [r3, #28]
      break;
 80024d0:	e048      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 fad0 	bl	8002a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2104      	movs	r1, #4
 80024fc:	438a      	bics	r2, r1
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002512:	e027      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 fb09 	bl	8002b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	0109      	lsls	r1, r1, #4
 8002530:	430a      	orrs	r2, r1
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4910      	ldr	r1, [pc, #64]	@ (8002580 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002540:	400a      	ands	r2, r1
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002558:	e004      	b.n	8002564 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800255a:	2317      	movs	r3, #23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	223c      	movs	r2, #60	@ 0x3c
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

  return status;
 800256c:	2317      	movs	r3, #23
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	781b      	ldrb	r3, [r3, #0]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b006      	add	sp, #24
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	08002f14 	.word	0x08002f14
 8002580:	fffffbff 	.word	0xfffffbff

08002584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025bc:	46c0      	nop			@ (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <TIM_Base_SetConfig+0xdc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x20>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a31      	ldr	r2, [pc, #196]	@ (80026a4 <TIM_Base_SetConfig+0xe0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2270      	movs	r2, #112	@ 0x70
 80025e8:	4393      	bics	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <TIM_Base_SetConfig+0xdc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00f      	beq.n	800261e <TIM_Base_SetConfig+0x5a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <TIM_Base_SetConfig+0xe0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00b      	beq.n	800261e <TIM_Base_SetConfig+0x5a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <TIM_Base_SetConfig+0xe4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x5a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a26      	ldr	r2, [pc, #152]	@ (80026ac <TIM_Base_SetConfig+0xe8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x5a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a25      	ldr	r2, [pc, #148]	@ (80026b0 <TIM_Base_SetConfig+0xec>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a24      	ldr	r2, [pc, #144]	@ (80026b4 <TIM_Base_SetConfig+0xf0>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	4393      	bics	r3, r2
 8002636:	001a      	movs	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <TIM_Base_SetConfig+0xdc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0xaa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <TIM_Base_SetConfig+0xe8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0xaa>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <TIM_Base_SetConfig+0xec>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d103      	bne.n	8002676 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2201      	movs	r2, #1
 8002682:	4013      	ands	r3, r2
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2201      	movs	r2, #1
 800268e:	4393      	bics	r3, r2
 8002690:	001a      	movs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
  }
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40002000 	.word	0x40002000
 80026ac:	40014400 	.word	0x40014400
 80026b0:	40014800 	.word	0x40014800
 80026b4:	fffffcff 	.word	0xfffffcff

080026b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4393      	bics	r3, r2
 80026d0:	001a      	movs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a2e      	ldr	r2, [pc, #184]	@ (80027a0 <TIM_OC1_SetConfig+0xe8>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2203      	movs	r2, #3
 80026ee:	4393      	bics	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2202      	movs	r2, #2
 8002700:	4393      	bics	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <TIM_OC1_SetConfig+0xec>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_OC1_SetConfig+0x6e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a23      	ldr	r2, [pc, #140]	@ (80027a8 <TIM_OC1_SetConfig+0xf0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC1_SetConfig+0x6e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a22      	ldr	r2, [pc, #136]	@ (80027ac <TIM_OC1_SetConfig+0xf4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10c      	bne.n	8002740 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2208      	movs	r2, #8
 800272a:	4393      	bics	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2204      	movs	r2, #4
 800273c:	4393      	bics	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <TIM_OC1_SetConfig+0xec>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <TIM_OC1_SetConfig+0xa0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <TIM_OC1_SetConfig+0xf0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_OC1_SetConfig+0xa0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <TIM_OC1_SetConfig+0xf4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <TIM_OC1_SetConfig+0xf8>)
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <TIM_OC1_SetConfig+0xfc>)
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	fffeff8f 	.word	0xfffeff8f
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	fffffeff 	.word	0xfffffeff
 80027b4:	fffffdff 	.word	0xfffffdff

080027b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	2210      	movs	r2, #16
 80027ce:	4393      	bics	r3, r2
 80027d0:	001a      	movs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002898 <TIM_OC2_SetConfig+0xe0>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	@ (800289c <TIM_OC2_SetConfig+0xe4>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2220      	movs	r2, #32
 8002802:	4393      	bics	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <TIM_OC2_SetConfig+0xe8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10d      	bne.n	8002836 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2280      	movs	r2, #128	@ 0x80
 800281e:	4393      	bics	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	4393      	bics	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <TIM_OC2_SetConfig+0xe8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_OC2_SetConfig+0x96>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a18      	ldr	r2, [pc, #96]	@ (80028a4 <TIM_OC2_SetConfig+0xec>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_OC2_SetConfig+0x96>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a17      	ldr	r2, [pc, #92]	@ (80028a8 <TIM_OC2_SetConfig+0xf0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d113      	bne.n	8002876 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4a16      	ldr	r2, [pc, #88]	@ (80028ac <TIM_OC2_SetConfig+0xf4>)
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <TIM_OC2_SetConfig+0xf8>)
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	621a      	str	r2, [r3, #32]
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b006      	add	sp, #24
 8002896:	bd80      	pop	{r7, pc}
 8002898:	feff8fff 	.word	0xfeff8fff
 800289c:	fffffcff 	.word	0xfffffcff
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40014400 	.word	0x40014400
 80028a8:	40014800 	.word	0x40014800
 80028ac:	fffffbff 	.word	0xfffffbff
 80028b0:	fffff7ff 	.word	0xfffff7ff

080028b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <TIM_OC3_SetConfig+0xdc>)
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a2d      	ldr	r2, [pc, #180]	@ (8002994 <TIM_OC3_SetConfig+0xe0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2203      	movs	r2, #3
 80028e8:	4393      	bics	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <TIM_OC3_SetConfig+0xe4>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a23      	ldr	r2, [pc, #140]	@ (800299c <TIM_OC3_SetConfig+0xe8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10d      	bne.n	800292e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <TIM_OC3_SetConfig+0xec>)
 8002916:	4013      	ands	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a1e      	ldr	r2, [pc, #120]	@ (80029a4 <TIM_OC3_SetConfig+0xf0>)
 800292a:	4013      	ands	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1a      	ldr	r2, [pc, #104]	@ (800299c <TIM_OC3_SetConfig+0xe8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_OC3_SetConfig+0x92>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <TIM_OC3_SetConfig+0xf4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC3_SetConfig+0x92>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <TIM_OC3_SetConfig+0xf8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <TIM_OC3_SetConfig+0xfc>)
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <TIM_OC3_SetConfig+0x100>)
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b006      	add	sp, #24
 800298e:	bd80      	pop	{r7, pc}
 8002990:	fffffeff 	.word	0xfffffeff
 8002994:	fffeff8f 	.word	0xfffeff8f
 8002998:	fffffdff 	.word	0xfffffdff
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	fffff7ff 	.word	0xfffff7ff
 80029a4:	fffffbff 	.word	0xfffffbff
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800
 80029b0:	ffffefff 	.word	0xffffefff
 80029b4:	ffffdfff 	.word	0xffffdfff

080029b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <TIM_OC4_SetConfig+0xa8>)
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a20      	ldr	r2, [pc, #128]	@ (8002a64 <TIM_OC4_SetConfig+0xac>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <TIM_OC4_SetConfig+0xb0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <TIM_OC4_SetConfig+0xb4>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	031b      	lsls	r3, r3, #12
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <TIM_OC4_SetConfig+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_OC4_SetConfig+0x70>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	@ (8002a74 <TIM_OC4_SetConfig+0xbc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_OC4_SetConfig+0x70>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <TIM_OC4_SetConfig+0xc0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d109      	bne.n	8002a3c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	@ (8002a7c <TIM_OC4_SetConfig+0xc4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b006      	add	sp, #24
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	ffffefff 	.word	0xffffefff
 8002a64:	feff8fff 	.word	0xfeff8fff
 8002a68:	fffffcff 	.word	0xfffffcff
 8002a6c:	ffffdfff 	.word	0xffffdfff
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800
 8002a7c:	ffffbfff 	.word	0xffffbfff

08002a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <TIM_OC5_SetConfig+0x9c>)
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <TIM_OC5_SetConfig+0xa0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <TIM_OC5_SetConfig+0xa4>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	@ (8002b28 <TIM_OC5_SetConfig+0xa8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <TIM_OC5_SetConfig+0x66>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <TIM_OC5_SetConfig+0xac>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC5_SetConfig+0x66>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <TIM_OC5_SetConfig+0xb0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d109      	bne.n	8002afa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <TIM_OC5_SetConfig+0x9c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b006      	add	sp, #24
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	fffeffff 	.word	0xfffeffff
 8002b20:	fffeff8f 	.word	0xfffeff8f
 8002b24:	fffdffff 	.word	0xfffdffff
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800

08002b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <TIM_OC6_SetConfig+0xa0>)
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd8 <TIM_OC6_SetConfig+0xa4>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <TIM_OC6_SetConfig+0xa8>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	051b      	lsls	r3, r3, #20
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <TIM_OC6_SetConfig+0xac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_OC6_SetConfig+0x68>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	@ (8002be4 <TIM_OC6_SetConfig+0xb0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_OC6_SetConfig+0x68>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <TIM_OC6_SetConfig+0xb4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d109      	bne.n	8002bb0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <TIM_OC6_SetConfig+0xb8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	029b      	lsls	r3, r3, #10
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b006      	add	sp, #24
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	ffefffff 	.word	0xffefffff
 8002bd8:	feff8fff 	.word	0xfeff8fff
 8002bdc:	ffdfffff 	.word	0xffdfffff
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	fffbffff 	.word	0xfffbffff

08002bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	221f      	movs	r2, #31
 8002c00:	4013      	ands	r3, r2
 8002c02:	2201      	movs	r2, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	43d2      	mvns	r2, r2
 8002c12:	401a      	ands	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	211f      	movs	r1, #31
 8002c20:	400b      	ands	r3, r1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4099      	lsls	r1, r3
 8002c26:	000b      	movs	r3, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b006      	add	sp, #24
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223c      	movs	r2, #60	@ 0x3c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e04a      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	223c      	movs	r2, #60	@ 0x3c
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	223d      	movs	r2, #61	@ 0x3d
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2270      	movs	r2, #112	@ 0x70
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a11      	ldr	r2, [pc, #68]	@ (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223d      	movs	r2, #61	@ 0x3d
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	223c      	movs	r2, #60	@ 0x3c
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	ff0fffff 	.word	0xff0fffff
 8002cf8:	40000400 	.word	0x40000400

08002cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223c      	movs	r2, #60	@ 0x3c
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e06f      	b.n	8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223c      	movs	r2, #60	@ 0x3c
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	@ 0xff
 8002d24:	4393      	bics	r3, r2
 8002d26:	001a      	movs	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a33      	ldr	r2, [pc, #204]	@ (8002e00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002d42:	401a      	ands	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002d5e:	401a      	ands	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a29      	ldr	r2, [pc, #164]	@ (8002e10 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a26      	ldr	r2, [pc, #152]	@ (8002e14 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002d88:	401a      	ands	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a21      	ldr	r2, [pc, #132]	@ (8002e1c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002d98:	401a      	ands	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e20 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d11c      	bne.n	8002de6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002db0:	401a      	ands	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002dce:	401a      	ands	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002ddc:	401a      	ands	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	@ 0x3c
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	fffffcff 	.word	0xfffffcff
 8002e04:	fffffbff 	.word	0xfffffbff
 8002e08:	fffff7ff 	.word	0xfffff7ff
 8002e0c:	ffffefff 	.word	0xffffefff
 8002e10:	ffffdfff 	.word	0xffffdfff
 8002e14:	ffffbfff 	.word	0xffffbfff
 8002e18:	fff0ffff 	.word	0xfff0ffff
 8002e1c:	efffffff 	.word	0xefffffff
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	ff0fffff 	.word	0xff0fffff
 8002e28:	feffffff 	.word	0xfeffffff
 8002e2c:	fdffffff 	.word	0xfdffffff
 8002e30:	dfffffff 	.word	0xdfffffff

08002e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <memset>:
 8002e64:	0003      	movs	r3, r0
 8002e66:	1882      	adds	r2, r0, r2
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <memset+0xa>
 8002e6c:	4770      	bx	lr
 8002e6e:	7019      	strb	r1, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	e7f9      	b.n	8002e68 <memset+0x4>

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	2600      	movs	r6, #0
 8002e78:	4c0c      	ldr	r4, [pc, #48]	@ (8002eac <__libc_init_array+0x38>)
 8002e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002eb0 <__libc_init_array+0x3c>)
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	42a6      	cmp	r6, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	2600      	movs	r6, #0
 8002e86:	f000 f819 	bl	8002ebc <_init>
 8002e8a:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb4 <__libc_init_array+0x40>)
 8002e8c:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb8 <__libc_init_array+0x44>)
 8002e8e:	1b64      	subs	r4, r4, r5
 8002e90:	10a4      	asrs	r4, r4, #2
 8002e92:	42a6      	cmp	r6, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	00b3      	lsls	r3, r6, #2
 8002e9a:	58eb      	ldr	r3, [r5, r3]
 8002e9c:	4798      	blx	r3
 8002e9e:	3601      	adds	r6, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	00b3      	lsls	r3, r6, #2
 8002ea4:	58eb      	ldr	r3, [r5, r3]
 8002ea6:	4798      	blx	r3
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08002f68 	.word	0x08002f68
 8002eb0:	08002f68 	.word	0x08002f68
 8002eb4:	08002f6c 	.word	0x08002f6c
 8002eb8:	08002f68 	.word	0x08002f68

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
